# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: handlers/general.py ---

from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.settings_manager import get_user_settings, update_user_settings
import logging
import time
# --- –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ ---
# –¢–µ–ø–µ—Ä—å –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
# –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram (/).
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))

logger = logging.getLogger(__name__)

def create_settings_keyboard(user_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    user_settings = get_user_settings(user_id)
    current_mode = user_settings.get("mode", "rasa")
    fallback_enabled = user_settings.get("gigachat_fallback", False)
    # --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] ---
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω –≤–∫–ª—é—á–µ–Ω (True)
    stoplist_enabled = user_settings.get("stoplist_enabled", True)

    rasa_button_text = "‚úÖ –†–µ–∂–∏–º: Rasa" if current_mode == "rasa" else "–†–µ–∂–∏–º: Rasa"
    gigachat_button_text = "‚úÖ –†–µ–∂–∏–º: GigaChat" if current_mode == "gigachat" else "–†–µ–∂–∏–º: GigaChat"
    fallback_status = "‚úÖ –í–∫–ª" if fallback_enabled else "‚ùå –í—ã–∫–ª"
    # --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] ---
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
    stoplist_status = "‚ùå –í—ã–∫–ª" if stoplist_enabled else "‚úÖ –í–∫–ª"

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(rasa_button_text, callback_data="set_mode_rasa"),
        InlineKeyboardButton(gigachat_button_text, callback_data="set_mode_gigachat")
    )
    keyboard.add(
        InlineKeyboardButton(f"–î–æ–ø–æ–ª–Ω—è—Ç—å GigaChat: {fallback_status}", callback_data="toggle_fallback")
    )
    # --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] ---
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(
        InlineKeyboardButton(f"–°—Ç–æ–ø-–ª–∏—Å—Ç: {stoplist_status}", callback_data="toggle_stoplist")
    )
    return keyboard


def register_general_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """

    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start ---
    @dp.message_handler(commands=["start"])
    async def handle_start(message: types.Message):
        user_id = str(message.from_user.id)
        args = message.get_args()

        logger.info(f"[{user_id}] –ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (args): '{args}'")

        # --- [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] ---
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –í–°–ï–ì–î–ê, –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.
        mode_name = "Rasa" if get_user_settings(user_id).get("mode", "rasa") == "rasa" else "GigaChat"

        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è deep link ---
        if args and args.startswith("stand_"):
            update_user_settings(user_id, {
            "on_stand": True,
            "stand_last_active": time.time() 
            })
            logger.info(f"[{user_id}] –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è '—É —Å—Ç–µ–Ω–¥–∞'. –§–ª–∞–≥ on_stand=True.")

            # --- –í–ê–†–ò–ê–ù–¢ 1: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å—Ç–µ–Ω–¥–∞ ---
            welcome_text = (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–æ —Å—Ç–µ–Ω–¥–∞! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ë–∞–π–∫–∞–ª—É. üåø\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
            )
            
            # --- –í–ê–†–ò–ê–ù–¢ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –¥–ª—è –≤—Å–µ—Ö) ---
            # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –í–ê–†–ò–ê–ù–¢ 1 –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫
            # welcome_text = (
            #     f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —ç–∫–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ë–∞–π–∫–∞–ª—É üåø\n"
            #     f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{mode_name}*.\n\n"
            #     f"–î–ª—è –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –∏–∑ –º–µ–Ω—é."
            # )

        else:
            # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ ---
            welcome_text = (
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —ç–∫–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ë–∞–π–∫–∞–ª—É üåø\n"
                f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{mode_name}*.\n\n"
                f"–î–ª—è –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –∏–∑ –º–µ–Ω—é (–∏–∫–æ–Ω–∫–∞ '/' —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞)."
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            welcome_text,
            reply_markup=main_keyboard, # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ main_keyboard –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–¥–µ-—Ç–æ –≤—ã—à–µ
            parse_mode="Markdown"
        )

    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /search ---
    @dp.message_handler(commands=["search"])
    async def handle_search_command(message: types.Message):
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π-—Ç—Ä–∏–≥–≥–µ—Ä–æ–º
        inline_keyboard = types.InlineKeyboardMarkup()
        inline_keyboard.add(
            types.InlineKeyboardButton(
                text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º",
                switch_inline_query_current_chat=""
            )
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏:",
            reply_markup=inline_keyboard
        )

    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /help ---
    @dp.message_handler(commands=["help"])
    async def handle_help(message: types.Message):
        help_text = (
            "–Ø —ç–∫–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ë–∞–π–∫–∞–ª—É. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üìñ *–ü–æ–ª—É—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è:* –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ –≤–∏–¥–∞—Ö —Ñ–ª–æ—Ä—ã –∏ —Ñ–∞—É–Ω—ã (`–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ—Ä–ø—É`).\n"
            "üñºÔ∏è *–ò—Å–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* –ù–∞—Ö–æ–∂—É —Ñ–æ—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º (`–ø–∏—Ö—Ç–∞ —Å–∏–±–∏—Ä—Å–∫–∞—è –∑–∏–º–æ–π`).\n"
            "üó∫Ô∏è *–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ:* –û—Ç–æ–±—Ä–∞–∂–∞—é –∞—Ä–µ–∞–ª—ã –æ–±–∏—Ç–∞–Ω–∏—è (`–≥–¥–µ —Ä–∞—Å—Ç–µ—Ç —ç–¥–µ–ª—å–≤–µ–π—Å`).\n"
            "üêæ *–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–µ—Å—Ç–Ω–æ—Å—Ç–∏:* –°–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–∫–∏ –≤–∏–¥–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ (`–∂–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –û–ª—å—Ö–æ–Ω–µ`).\n\n"
            "–î–ª—è —Å–∞–º–æ–≥–æ —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search.\n"
            "–ò–ª–∏ –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–∏–º–≤–æ–ª @ –∏ –Ω–∞–∂–º–∏—Ç–µ Tab"
        )
        await message.answer(help_text, parse_mode="Markdown")

    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ---
    @dp.message_handler(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def handle_settings(message: types.Message):
        user_id = str(message.from_user.id)
        keyboard = create_settings_keyboard(user_id)
        await message.answer("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=keyboard)

    # --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] ---
    # –î–æ–±–∞–≤–ª—è–µ–º 'toggle_stoplist' –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤
    @dp.callback_query_handler(lambda c: c.data in ["set_mode_rasa", "set_mode_gigachat", "toggle_fallback", "toggle_stoplist"])
    async def process_settings_callback(callback_query: types.CallbackQuery):
        user_id = str(callback_query.from_user.id)
        data = callback_query.data

        if data == "set_mode_rasa":
            update_user_settings(user_id, {"mode": "rasa"})
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ Rasa")
        elif data == "set_mode_gigachat":
            update_user_settings(user_id, {"mode": "gigachat"})
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ GigaChat")
        elif data == "toggle_fallback":
            current_fallback_state = get_user_settings(user_id).get("gigachat_fallback", False)
            new_state = not current_fallback_state
            update_user_settings(user_id, {"gigachat_fallback": new_state})
            await callback_query.answer(f"–†–µ–∂–∏–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è GigaChat {'–≤–∫–ª—é—á–µ–Ω' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        # --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] ---
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
        elif data == "toggle_stoplist":
            current_stoplist_state = get_user_settings(user_id).get("stoplist_enabled", True)
            new_state = not current_stoplist_state
            update_user_settings(user_id, {"stoplist_enabled": new_state})
            await callback_query.answer(f"–°—Ç–æ–ø-–ª–∏—Å—Ç {'–≤–∫–ª—é—á–µ–Ω' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω'}")

        keyboard = create_settings_keyboard(user_id)
        try:
            if callback_query.message and callback_query.message.reply_markup != keyboard:
                await callback_query.message.edit_reply_markup(keyboard)
        except Exception:
            pass # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê: handlers/general.py ---