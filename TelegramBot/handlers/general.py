# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: handlers/general.py ---

from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# [# –ò–°–ü–†–ê–í–õ–ï–ù–û] –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
from utils.settings_manager import get_user_settings, update_user_settings

main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))

def create_settings_keyboard(user_id: str) -> InlineKeyboardMarkup:
    user_settings = get_user_settings(user_id)
    current_mode = user_settings.get("mode", "rasa")
    # [# –ò–°–ü–†–ê–í–õ–ï–ù–û] –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ fallback –∏–∑ –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    fallback_enabled = user_settings.get("gigachat_fallback", False)

    rasa_button_text = "‚úÖ –†–µ–∂–∏–º: Rasa" if current_mode == "rasa" else "–†–µ–∂–∏–º: Rasa"
    gigachat_button_text = "‚úÖ –†–µ–∂–∏–º: GigaChat" if current_mode == "gigachat" else "–†–µ–∂–∏–º: GigaChat"
    fallback_status = "‚úÖ –í–∫–ª" if fallback_enabled else "‚ùå –í—ã–∫–ª"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(rasa_button_text, callback_data="set_mode_rasa"),
        InlineKeyboardButton(gigachat_button_text, callback_data="set_mode_gigachat")
    )
    keyboard.add(
        InlineKeyboardButton(f"–î–æ–ø–æ–ª–Ω—è—Ç—å GigaChat: {fallback_status}", callback_data="toggle_fallback")
    )
    return keyboard

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

def register_general_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""

    @dp.message_handler(commands=["start"])
    async def handle_start(message: types.Message):
        user_id = str(message.from_user.id)
        mode_name = "Rasa" if get_user_settings(user_id).get("mode", "rasa") == "rasa" else "GigaChat"
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ë–∞–π–∫–∞–ª–∞ üåø\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_name}\n"
            f"–°–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=main_keyboard
        )

    @dp.message_handler(lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def handle_settings(message: types.Message):
        user_id = str(message.from_user.id)
        keyboard = create_settings_keyboard(user_id)
        await message.answer("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data in ["set_mode_rasa", "set_mode_gigachat", "toggle_fallback"])
    async def process_settings_callback(callback_query: types.CallbackQuery):
        user_id = str(callback_query.from_user.id)
        data = callback_query.data

        if data == "set_mode_rasa":
            update_user_settings(user_id, {"mode": "rasa"})
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ Rasa")
        elif data == "set_mode_gigachat":
            update_user_settings(user_id, {"mode": "gigachat"})
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ GigaChat")
        elif data == "toggle_fallback":
            # [# –ò–°–ü–†–ê–í–õ–ï–ù–û] –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º–µ–Ω—è–µ–º –µ–≥–æ
            current_fallback_state = get_user_settings(user_id).get("gigachat_fallback", False)
            new_state = not current_fallback_state
            update_user_settings(user_id, {"gigachat_fallback": new_state})
            await callback_query.answer(f"–†–µ–∂–∏–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è GigaChat {'–≤–∫–ª—é—á–µ–Ω' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω'}")

        keyboard = create_settings_keyboard(user_id)
        try:
            # –ò–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ
            if callback_query.message and callback_query.message.reply_markup != keyboard:
                await callback_query.message.edit_reply_markup(keyboard)
        except Exception:
            pass # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
            
# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê: handlers/general.py ---