# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: handlers/gigachat_handler.py ---

import logging
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from logic.query_analyze import QueryAnalyzer
from logic.dialogue_manager import DialogueManager
from logic.api_handlers import handle_intent
from utils.bot_utils import send_long_message

logger = logging.getLogger(__name__)

class GigaChatHandler:
    def __init__(self, qa: QueryAnalyzer, dialogue_manager: DialogueManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GigaChat-—Ä–µ–∂–∏–º–∞.
        :param qa: –≠–∫–∑–µ–º–ø–ª—è—Ä QueryAnalyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.
        :param dialogue_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä DialogueManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
        """
        self.qa = qa
        self.dialogue_manager = dialogue_manager

    async def process_message(self, message: types.Message):
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ GigaChat.
        """
        user_id = str(message.chat.id)
        query = message.text

        if not self.qa or not self.dialogue_manager.context_manager.redis_client:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–ª—é—á–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è GigaChat-—Ä–µ–∂–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        await message.bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑
        intent = await self.qa.detect_intent(query)
        entities_response = await self.qa.extract_entities(query, intent)
        if not entities_response.get("success"):
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {entities_response.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return
        current_entities = entities_response["result"]

        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–∏
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—Ä–æ—Å–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –±–µ—Ä–µ–º –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
        final_object_for_category = current_entities.get("object") or \
                                    (self.dialogue_manager.context_manager.get_context(user_id)
                                     .get("history", [{}])[0].get("object"))
        object_category = await self.qa.get_object_category(final_object_for_category) if final_object_for_category else None

        # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–º–æ—â—å—é DialogueManager
        final_intent, final_entities, comparison_pair = self.dialogue_manager.process_turn(
            user_id=user_id, query=query, intent=intent, 
            current_entities=current_entities, object_category=object_category
        )
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if not final_entities.get("object") and final_intent in ["get_picture", "get_text", "get_location", "get_intersection_object_on_map"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–∞–∫–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏ –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–º –∏–¥–µ—Ç —Ä–µ—á—å?")
            return
        if not final_entities.get("geo_place") and final_intent in ["get_objects_in_polygon"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –∏–¥–µ—Ç —Ä–µ—á—å?")
            return

        # –®–∞–≥ 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        logger.info(f"[USER_ID: {user_id}] GigaChat: –í—ã–ø–æ–ª–Ω—è–µ–º '{final_intent}' —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏: {final_entities}")
        responses = await handle_intent(
            intent=final_intent, result=final_entities, user_id=user_id,
            original_query=query, debug_mode=False
        )
        
        # –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        for resp_data in responses:
            if resp_data.get("type") == "text":
                await send_long_message(message, resp_data["content"], parse_mode=resp_data.get("parse_mode"))
            elif resp_data.get("type") == "image":
                await message.answer_photo(resp_data["content"])
            elif resp_data.get("type") == "map":
                kb = InlineKeyboardMarkup().add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É üåê", url=resp_data["interactive"]))
                if "caption" in resp_data and len(resp_data["caption"]) > 1024:
                    await message.answer_photo(photo=resp_data["static"], reply_markup=kb)
                    await send_long_message(message, resp_data["caption"])
                else:
                    await message.answer_photo(photo=resp_data["static"], caption=resp_data.get("caption", "–ö–∞—Ä—Ç–∞"), reply_markup=kb)

        # –®–∞–≥ 7: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        if comparison_pair:
            obj1 = comparison_pair['object1']
            obj2 = comparison_pair['object2']
            text = f"–ö—Å—Ç–∞—Ç–∏, –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å '{obj1}'. –•–æ—Ç–∏—Ç–µ, —è —Å—Ä–∞–≤–Ω—é –¥–ª—è –≤–∞—Å '{obj2}' –∏ '{obj1}' –ø–æ –∫–ª—é—á–µ–≤—ã–º –æ—Ç–ª–∏—á–∏—è–º?"
            kb = InlineKeyboardMarkup().add(types.InlineKeyboardButton("–î–∞, —Å—Ä–∞–≤–Ω–∏!", callback_data="compare_objects"))
            await message.answer(text, reply_markup=kb)

    async def process_callback(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è GigaChat-—Ä–µ–∂–∏–º–∞.
        """
        user_id = str(callback_query.from_user.id)
        data = callback_query.data
        message = callback_query.message

        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ä–∞–≤–Ω–∏—Ç—å" ---
        if data == 'compare_objects':
            await callback_query.answer("–ì–æ—Ç–æ–≤–ª—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
            await message.edit_reply_markup(reply_markup=None)

            user_context = self.dialogue_manager.context_manager.get_context(user_id)
            history = user_context.get("history", [])

            if len(history) < 2:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ—Ç–µ—Ä—è–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
                return

            object2 = history[0].get("object")
            object1 = history[1].get("object")

            if not object1 or not object2:
                await message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
                return

            responses = await handle_intent(
                intent="get_comparison", 
                result={"object1": object1, "object2": object2},
                user_id=user_id, original_query="", debug_mode=False
            )
            for resp_data in responses:
                await send_long_message(message, resp_data["content"], parse_mode=resp_data.get("parse_mode"))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–ª—è—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç
            self.dialogue_manager.context_manager.set_context(user_id, {"history": [history[0]]})
            logger.info(f"[USER_ID: {user_id}] –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç: {object2}")
            return

        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É—Ç–æ—á–Ω–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –º—ã –µ–µ –¥–æ–±–∞–≤–∏–º) ---
        if data.startswith('clarify_object:'):
            await callback_query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
            return