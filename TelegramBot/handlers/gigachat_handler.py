# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: handlers/gigachat_handler.py ---

import logging
import aiohttp
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, Any

from logic.query_analyze import QueryAnalyzer
from logic.dialogue_manager import DialogueManager
from logic.api_handlers import handle_intent
from utils.bot_utils import send_long_message

logger = logging.getLogger(__name__)

# [–ù–û–í–û–ï] –°–ª–æ–≤–∞—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ —Ñ—É–Ω–∫—Ü–∏—è-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä
REQUIRED_ENTITIES = {
    "get_picture": ["object"],
    "get_text": ["object"],
    "get_location": ["object"],
    "get_objects_in_polygon": ["geo_place"],
    "get_intersection_object_on_map": ["object", "geo_place"],
}

ACTION_VERBS = ["—Ä–∞—Å—Å–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏", "–æ–ø–∏—à–∏", "–≤—ã–≥–ª—è–¥–∏—Ç", "–≥–¥–µ", "–Ω–∞–π—Ç–∏", "—Ä–∞—Å—Ç–µ—Ç", "–æ–±–∏—Ç–∞–µ—Ç", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å"]

def is_request_complete(intent: str, entities: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–∞."""
    if intent not in REQUIRED_ENTITIES:
        return False
    return all(entities.get(entity) for entity in REQUIRED_ENTITIES[intent])


class GigaChatHandler:
    def __init__(self, qa: QueryAnalyzer, dialogue_manager: DialogueManager, session: aiohttp.ClientSession):
        self.qa = qa
        self.dialogue_manager = dialogue_manager
        self.session = session

    async def process_message(self, message: types.Message):
        user_id = str(message.chat.id)
        query = message.text
        
        try:
            await message.bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            
            # --- –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (NLU) ---
            intent = await self.qa.detect_intent(query)
            entities_response = await self.qa.extract_entities(query, intent)
            
            if not entities_response.get("success"):
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {entities_response.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return
            
            entities = entities_response["result"]
            
            # --- –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ ---
            
            # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö, –Ω–µ—è–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            is_ambiguous_query = len(query.split()) <= 3 and not any(verb in query.lower() for verb in ACTION_VERBS)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
            is_complete_by_rules = is_request_complete(intent, entities)

            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –Ω–µ—è–≤–Ω—ã–π,
            # –º—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ–º LLM –∏ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ù–ï–ü–û–õ–ù–´–ú, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.
            if is_complete_by_rules and is_ambiguous_query:
                logger.info(f"–ó–∞–ø—Ä–æ—Å '{query}' –ü–û–õ–ù–´–ô, –Ω–æ –ø–æ—Ö–æ–∂ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –ù–ï–ü–û–õ–ù–´–ú.")
                is_final_complete = False
            else:
                is_final_complete = is_complete_by_rules

            if is_final_complete:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –ü–û–õ–ù–´–ô. –ò–Ω—Ç–µ–Ω—Ç: {intent}, –°—É—â–Ω–æ—Å—Ç–∏: {entities}")
                final_intent, final_entities = intent, entities
            else:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –ù–ï–ü–û–õ–ù–´–ô. –ò–Ω—Ç–µ–Ω—Ç: {intent}, –°—É—â–Ω–æ—Å—Ç–∏: {entities}. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ DM...")
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å –≤ DM, —á—Ç–æ–±—ã –æ–Ω —Ç–æ–∂–µ –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–≤—Ä–∏—Å—Ç–∏–∫—É
                final_intent, final_entities = await self.dialogue_manager.enrich_request(user_id, query, intent, entities)
                logger.info(f"DM –æ–±–æ–≥–∞—Ç–∏–ª –∑–∞–ø—Ä–æ—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç: –ò–Ω—Ç–µ–Ω—Ç: {final_intent}, –°—É—â–Ω–æ—Å—Ç–∏: {final_entities}")

            # --- –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (DM) ---
            object_to_classify = final_entities.get("object")
            object_category = await self.qa.get_object_category(object_to_classify) if object_to_classify else None
            
            comparison_pair = await self.dialogue_manager.update_and_check_comparison(
                user_id, final_intent, final_entities, object_category
            )
            
            # --- –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ ---
            if not is_request_complete(final_intent, final_entities):
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–∞–∫–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏, –∂–∏–≤–æ—Ç–Ω–æ–º –∏–ª–∏ –º–µ—Å—Ç–µ –∏–¥–µ—Ç —Ä–µ—á—å?")
                return

            responses = await handle_intent(
                session=self.session, intent=final_intent, result=final_entities, 
                user_id=user_id, original_query=query, debug_mode=False
            )

            # --- –≠—Ç–∞–ø 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
            for resp_data in responses:
                if resp_data.get("type") == "text":
                    await send_long_message(message, resp_data["content"], parse_mode=resp_data.get("parse_mode"))
                elif resp_data.get("type") == "image":
                    await message.answer_photo(resp_data["content"])
                elif resp_data.get("type") == "map":
                    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É üåê", url=resp_data["interactive"]))
                    if "caption" in resp_data and len(resp_data["caption"]) > 1024:
                        await message.answer_photo(photo=resp_data["static"], reply_markup=kb)
                        await send_long_message(message, resp_data["caption"])
                    else:
                        await message.answer_photo(photo=resp_data["static"], caption=resp_data.get("caption", "–ö–∞—Ä—Ç–∞"), reply_markup=kb)

            if comparison_pair:
                obj1 = comparison_pair['object1']
                obj2 = comparison_pair['object2']
                text = f"–ö—Å—Ç–∞—Ç–∏, –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å '{obj1}'. –•–æ—Ç–∏—Ç–µ, —è —Å—Ä–∞–≤–Ω—é –¥–ª—è –≤–∞—Å '{obj2}' –∏ '{obj1}' –ø–æ –∫–ª—é—á–µ–≤—ã–º –æ—Ç–ª–∏—á–∏—è–º?"
                kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞, —Å—Ä–∞–≤–Ω–∏!", callback_data="compare_objects"))
                await message.answer(text, reply_markup=kb)
            
        except Exception as e:
            logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ GigaChatHandler.process_message: {e}", exc_info=True)
            await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def process_callback(self, callback_query: types.CallbackQuery):
        user_id = str(callback_query.from_user.id)
        data = callback_query.data
        message = callback_query.message

        if data == 'compare_objects':
            await callback_query.answer("–ì–æ—Ç–æ–≤–ª—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
            await message.edit_reply_markup(reply_markup=None)
            user_context = await self.dialogue_manager.context_manager.get_context(user_id)
            history = user_context.get("history", [])
            if len(history) < 2:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ—Ç–µ—Ä—è–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
                return
            object2 = history[0].get("object")
            object1 = history[1].get("object")
            if not object1 or not object2:
                await message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
                return
            responses = await handle_intent(
                session=self.session,
                intent="get_comparison", 
                result={"object1": object1, "object2": object2},
                user_id=user_id, original_query="", debug_mode=False
            )
            for resp_data in responses:
                await send_long_message(message, resp_data["content"], parse_mode=resp_data.get("parse_mode"))
            await self.dialogue_manager.context_manager.set_context(user_id, {"history": [history[0]]})
            logger.info(f"[USER_ID: {user_id}] –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç: {object2}")
            return
        if data.startswith('clarify_object:'):
            await callback_query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
            return

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê: handlers/gigachat_handler.py ---