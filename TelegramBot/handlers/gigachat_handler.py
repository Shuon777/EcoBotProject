# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: handlers/gigachat_handler.py ---
import base64
import json
import logging
import aiohttp
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, Any

from logic.query_analyze import QueryAnalyzer
from logic.dialogue_manager import DialogueManager
from logic.api_handlers import handle_intent
from utils.bot_utils import send_long_message

logger = logging.getLogger(__name__)

REQUIRED_ENTITIES = {
    "get_picture": ["object"],
    "get_text": ["object"],
    "get_location": ["object"],
    "get_objects_in_polygon": ["geo_place"],
    "get_intersection_object_on_map": ["object", "geo_place"],
}

ACTION_VERBS = ["—Ä–∞—Å—Å–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏", "–æ–ø–∏—à–∏", "–≤—ã–≥–ª—è–¥–∏—Ç", "–≥–¥–µ", "–Ω–∞–π—Ç–∏", "—Ä–∞—Å—Ç–µ—Ç", "–æ–±–∏—Ç–∞–µ—Ç", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å"]

def is_request_complete(intent: str, entities: Dict[str, Any]) -> bool:
    if intent not in REQUIRED_ENTITIES:
        return False
    return all(entities.get(entity) for entity in REQUIRED_ENTITIES[intent])


class GigaChatHandler:
    def __init__(self, qa: QueryAnalyzer, dialogue_manager: DialogueManager, session: aiohttp.ClientSession):
        self.qa = qa
        self.dialogue_manager = dialogue_manager
        self.session = session

    async def process_message(self, message: types.Message):
        user_id = str(message.chat.id)
        query = message.text
        
        try:
            await message.bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            
            intent = await self.qa.detect_intent(query)
            entities_response = await self.qa.extract_entities(query, intent)
            
            if not entities_response.get("success"):
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {entities_response.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return
            
            entities = entities_response["result"]
            
            is_ambiguous_query = len(query.split()) <= 3 and not any(verb in query.lower() for verb in ACTION_VERBS)
            is_complete_by_rules = is_request_complete(intent, entities)

            if is_complete_by_rules and is_ambiguous_query:
                is_final_complete = False
            else:
                is_final_complete = is_complete_by_rules

            if is_final_complete:
                final_intent, final_entities = intent, entities
            else:
                final_intent, final_entities = await self.dialogue_manager.enrich_request(user_id, query, intent, entities)

            if not is_request_complete(final_intent, final_entities):
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–∞–∫–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏, –∂–∏–≤–æ—Ç–Ω–æ–º –∏–ª–∏ –º–µ—Å—Ç–µ –∏–¥–µ—Ç —Ä–µ—á—å?")
                return

            final_entities["user_id"] = user_id

            responses = await handle_intent(
                session=self.session, intent=final_intent, result=final_entities, 
                user_id=user_id, original_query=query, debug_mode=False
            )
            
            was_successful = True
            resolved_canonical_name = None

            for resp_data in responses:
                if resp_data.get("type") == "clarification":
                    kb = InlineKeyboardMarkup()
                    for row in resp_data["buttons"]:
                        kb.row(*[InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"]) for btn in row])
                    await message.answer(resp_data["content"], reply_markup=kb)
                    was_successful = False 
                    break 
                
                if resp_data.get("type") == "text":
                    final_text = resp_data["content"]
                    if resp_data.get("canonical_name"):
                        resolved_canonical_name = resp_data["canonical_name"]
                        original_object = final_entities.get("object")
                        
                        if resolved_canonical_name.lower() != original_object.lower():
                            preface = f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{original_object}' –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ **'{resolved_canonical_name}'**:\n\n"
                            final_text = preface + final_text
                    
                    await send_long_message(message, final_text, parse_mode="Markdown")
                
                elif resp_data.get("type") == "image":
                    await message.answer_photo(resp_data["content"])
                elif resp_data.get("type") == "map":
                    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É üåê", url=resp_data["interactive"]))
                    if "caption" in resp_data and len(resp_data["caption"]) > 1024:
                        await message.answer_photo(photo=resp_data["static"], reply_markup=kb)
                        await send_long_message(message, resp_data["caption"])
                    else:
                        await message.answer_photo(photo=resp_data["static"], caption=resp_data.get("caption", "–ö–∞—Ä—Ç–∞"), reply_markup=kb)

            if was_successful:
                if resolved_canonical_name:
                    final_entities['object'] = resolved_canonical_name

                object_to_classify = final_entities.get("object")
                object_category = await self.qa.get_object_category(object_to_classify) if object_to_classify else None
                
                comparison_pair = await self.dialogue_manager.get_comparison_pair(
                    user_id, final_intent, final_entities, object_category
                )
                
                await self.dialogue_manager.update_history(
                    user_id, final_intent, final_entities, object_category
                )
                
                if comparison_pair:
                    obj1 = comparison_pair['object1']
                    obj2 = comparison_pair['object2']
                    text = f"–ö—Å—Ç–∞—Ç–∏, –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å '{obj1}'. –•–æ—Ç–∏—Ç–µ, —è —Å—Ä–∞–≤–Ω—é –¥–ª—è –≤–∞—Å '{obj2}' –∏ '{obj1}' –ø–æ –∫–ª—é—á–µ–≤—ã–º –æ—Ç–ª–∏—á–∏—è–º?"
                    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞, —Å—Ä–∞–≤–Ω–∏!", callback_data="compare_objects"))
                    await message.answer(text, reply_markup=kb)
            
        except Exception as e:
            logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ GigaChatHandler.process_message: {e}", exc_info=True)
            await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.")

    async def process_callback(self, callback_query: types.CallbackQuery):
        user_id = str(callback_query.from_user.id)
        data = callback_query.data
        message = callback_query.message
        
        if data.startswith('clarify_object:'):
            await message.edit_reply_markup(reply_markup=None)
            
            selected_object = data.split(':', 1)[1]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω–∏–ª –æ–±—ä–µ–∫—Ç: '{selected_object}'")

            simulated_text = f"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ {selected_object}"
            final_intent = "get_text"
            final_entities = {"object": selected_object}

            await message.bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            responses = await handle_intent(self.session, final_intent, final_entities, user_id, simulated_text, False)
            
            was_successful = True
            for resp_data in responses:
                if resp_data.get("type") == "text":
                    preface = f"–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ **'{selected_object}'**:\n\n"
                    final_text = preface + resp_data["content"]
                    await send_long_message(message, final_text, parse_mode="Markdown")
                elif resp_data.get("type") == "image":
                    await message.answer_photo(resp_data["content"])

            if was_successful:
                object_category = await self.qa.get_object_category(selected_object)
                
                comparison_pair = await self.dialogue_manager.get_comparison_pair(
                    user_id, final_intent, final_entities, object_category
                )
                
                await self.dialogue_manager.update_history(
                    user_id, final_intent, final_entities, object_category
                )
                
                if comparison_pair:
                    obj1 = comparison_pair['object1']
                    obj2 = comparison_pair['object2']
                    text = f"–ö—Å—Ç–∞—Ç–∏, –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å '{obj1}'. –•–æ—Ç–∏—Ç–µ, —è —Å—Ä–∞–≤–Ω—é –¥–ª—è –≤–∞—Å '{obj2}' –∏ '{obj1}' –ø–æ –∫–ª—é—á–µ–≤—ã–º –æ—Ç–ª–∏—á–∏—è–º?"
                    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞, —Å—Ä–∞–≤–Ω–∏!", callback_data="compare_objects"))
                    await message.answer(text, reply_markup=kb)

            await callback_query.answer()
            return

        if data.startswith('clarify_more:'):
            # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Redis
            try:
                parts = data.split(':', 2)
                ambiguous_term = parts[1]
                offset = int(parts[2])
            except (IndexError, ValueError):
                await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
                return

            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é: '{ambiguous_term}' —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º {offset}")
            await callback_query.answer("–ò—â—É –¥–∞–ª—å—à–µ...")

            responses = await handle_intent(
                self.session, "get_text", {"object": ambiguous_term, "offset": offset},
                user_id, ambiguous_term, False
            )

            for resp_data in responses:
                if resp_data.get("type") == "clarification":
                    kb = InlineKeyboardMarkup()
                    for row in resp_data["buttons"]:
                        kb.row(*[InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"]) for btn in row])
                    await message.edit_text(resp_data["content"], reply_markup=kb)
                    return
            
            await message.edit_text("–ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if data == 'compare_objects':
            await callback_query.answer("–ì–æ—Ç–æ–≤–ª—é —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
            await message.edit_reply_markup(reply_markup=None)

            user_context = await self.dialogue_manager.context_manager.get_context(user_id)
            history = user_context.get("history", [])

            if len(history) < 2:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ—Ç–µ—Ä—è–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
                return

            object2 = history[0].get("object")
            object1 = history[1].get("object")

            if not object1 or not object2:
                await message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
                return

            responses = await handle_intent(
                session=self.session, intent="get_comparison", 
                result={"object1": object1, "object2": object2},
                user_id=user_id, original_query="", debug_mode=False
            )
            for resp_data in responses:
                await send_long_message(message, resp_data["content"], parse_mode=resp_data.get("parse_mode"))
            
            await self.dialogue_manager.context_manager.set_context(user_id, {"history": [history[0]]})
            logger.info(f"[USER_ID: {user_id}] –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç: {object2}")
            return
        
        if data.startswith('fallback:'):
            await self.handle_fallback_callback(callback_query)

    async def handle_fallback_callback(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É–ø—Ä–æ—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = str(callback_query.from_user.id)
        data = callback_query.data
        message = callback_query.message
        
        try:
            parts = data.split(':', 2)
            fallback_type = parts[1]
            object_nom = parts[2]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ features –∏–∑ Redis
            from utils.context_manager import RedisContextManager
            context_manager = RedisContextManager()
            fallback_key = f"fallback_features:{user_id}"
            original_features = await context_manager.get_context(fallback_key)
            
            if not original_features:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã fallback features –¥–ª—è {user_id}")
                await callback_query.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ")
                return
            
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã features –∏–∑ Redis –¥–ª—è {user_id}: {original_features}")
            
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ features –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
            features = original_features.copy()
            
            if fallback_type == "no_season":
                features.pop("season", None)
                logger.info(f"–£–ø—Ä–æ—â–µ–Ω–∏–µ: –±–µ–∑ —Å–µ–∑–æ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º {features}")
            elif fallback_type == "no_habitat":
                features.pop("habitat", None)
                logger.info(f"–£–ø—Ä–æ—â–µ–Ω–∏–µ: –±–µ–∑ –º–µ—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º {features}")
            elif fallback_type == "basic":
                features = {}
                logger.info(f"–£–ø—Ä–æ—â–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç")
            
            # –£–¥–∞–ª—è–µ–º fallback features –∏–∑ Redis –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await context_manager.delete_context(fallback_key)
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–æ—â–µ–Ω–∏—è
            await message.edit_reply_markup(reply_markup=None)
            await callback_query.answer("–ò—â—É —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...")
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            feature_desc = []
            if features.get("season"):
                feature_desc.append(features['season'])
            if features.get("habitat"):
                feature_desc.append(f"–≤ {features['habitat']}")
                
            features_text = " ".join(feature_desc)
            simulated_query = f"–ü–æ–∫–∞–∂–∏ {object_nom} {features_text}".strip()
            
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {object_nom} —Å features: {features}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await message.bot.send_chat_action(chat_id=user_id, action=types.ChatActions.TYPING)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            responses = await handle_intent(
                self.session, "get_picture", {"object": object_nom, "features": features},
                user_id, simulated_query, False
            )
            
            # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –£–ü–†–û–©–ï–ù–ù–´–ô –≤–∞—Ä–∏–∞–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ===
            # –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            context_entities = {"object": object_nom}
            if features:  # –î–æ–±–∞–≤–ª—è–µ–º features —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                context_entities["features"] = features
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–∞
            object_category = await self.qa.get_object_category(object_nom)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await self.dialogue_manager.update_history(
                user_id, "get_picture", context_entities, object_category
            )
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é: {context_entities}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for resp in responses:
                if resp["type"] == "text":
                    await send_long_message(message, resp["content"])
                elif resp["type"] == "image":
                    await message.answer_photo(resp["content"])
                elif resp["type"] == "clarification":
                    kb = InlineKeyboardMarkup()
                    for row in resp["buttons"]:
                        kb.row(*[InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"]) for btn in row])
                    await message.answer(resp["content"], reply_markup=kb)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ fallback callback: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
            await callback_query.answer()
