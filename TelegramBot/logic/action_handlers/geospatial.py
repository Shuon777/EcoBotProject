import aiohttp
import logging
import time
import asyncio
from typing import Dict, Any
from urllib.parse import quote
from config import API_URLS, DEFAULT_TIMEOUT, STAND_SECRET_KEY, STAND_SESSION_TIMEOUT
from utils.settings_manager import get_user_settings, update_user_settings
from logic.entity_normalizer_for_maps import normalize_entity_name_for_maps, ENTITY_MAP
from logic.entity_normalizer import normalize_entity_name, GROUP_ENTITY_MAP
from logic.baikal_context import determine_baikal_relation

logger = logging.getLogger(__name__)

async def _get_map_from_api(session: aiohttp.ClientSession, url: str, payload: dict, object_name: str, debug_mode: bool, geo_name: str = None) -> list:
    async with session.post(f"{url}?debug_mode={str(debug_mode).lower()}", json=payload, timeout=DEFAULT_TIMEOUT) as map_resp:
        map_data = await map_resp.json()
        if not map_resp.ok: return [{"type": "text", "content": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É."}]

        names = sorted(list(set(name.capitalize() for name in map_data.get("names", []))))
        caption = ""
        if names:
            text_header = f"üìç –†—è–¥–æ–º —Å '{geo_name}' –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å '{object_name}' –≤ –º–µ—Å—Ç–∞—Ö:\n" if geo_name else f"üìç '{object_name.capitalize()}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–∞—Ö:\n"
            caption = text_header + "‚Ä¢ " + "\n‚Ä¢ ".join(names)

        messages = []
        if map_data.get("status") == "no_objects":
            text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª '{object_name}'" + (f" –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç '{geo_name}'." if geo_name else " –Ω–∞ –∫–∞—Ä—Ç–µ.")
            messages.append({"type": "text", "content": text})

        if map_data.get("interactive_map") and map_data.get("static_map"):
            s = map_data["static_map"]
            i = map_data["interactive_map"]
            logger.info(f"static_map - {s} and interactive_map - {i}")
            messages.append({"type": "map", "static": map_data["static_map"], "interactive": map_data["interactive_map"], "caption": caption})
        elif caption:
            messages.append({"type": "text", "content": caption})
        return messages

async def handle_nearest(session: aiohttp.ClientSession, analysis: dict, debug_mode: bool) -> list:
    object_nom = analysis.get("primary_entity", {}).get("name")
    geo_nom = analysis.get("secondary_entity", {}).get("name")
    if not object_nom or not geo_nom:
        return [{"type": "text", "content": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞: –Ω—É–∂–µ–Ω –∏ –æ–±—ä–µ–∫—Ç, –∏ –º–µ—Å—Ç–æ."}]

    try:
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ get_coords —Å payload - name: {geo_nom}")
        async with session.post(API_URLS["get_coords"], json={"name": geo_nom}, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok: return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{geo_nom}'."}]
            coords = await resp.json()
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç get_coords - {coords}")
        payload = {"latitude": coords.get("latitude"), "longitude": coords.get("longitude"), "radius_km": 50, "species_name": object_nom, "object_type": "geographical_entity"}
        return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom, debug_mode, geo_nom)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_nearest: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç."}]

async def handle_draw_locate_map(session: aiohttp.ClientSession, analysis: dict, debug_mode: bool) -> list:
    # [–ù–û–í–û–ï] –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ `analysis`
    object_nom = analysis.get("primary_entity", {}).get("name")
    if not object_nom: return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ."}]
    
    payload = {"latitude": 53.27612, "longitude": 107.3274, "radius_km": 500000, "species_name": object_nom, "object_type": "geographical_entity"}
    return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom, debug_mode)

async def handle_draw_map_of_infrastructure(session: aiohttp.ClientSession, analysis: dict, user_id: str, debug_mode: bool) -> list:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ.
    - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã–∑—ã–≤–∞–µ—Ç API –±—ç–∫–µ–Ω–¥–∞, –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Ä—Ç—É –∏–ª–∏ —Ç–µ–∫—Å—Ç).
    - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª —Å–æ —Å—Ç–µ–Ω–¥–∞ (—Ñ–ª–∞–≥ on_stand), –∏–∑–≤–ª–µ–∫–∞–µ—Ç external_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ 
      –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–µ–Ω–¥–∞.
    """
    primary_entity = analysis.get("primary_entity") or {}
    secondary_entity = analysis.get("secondary_entity") or {}

    raw_object_name = primary_entity.get("name")
    area_name = secondary_entity.get("name", "")

    if not raw_object_name:
        return [{"type": "text", "content": "–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ."}]

    normalized_type = normalize_entity_name_for_maps(raw_object_name)
    is_specific_name_search = normalized_type not in ENTITY_MAP.values()

    payload = {"limit": 10}
    if is_specific_name_search:
        payload["object_name"] = raw_object_name
        if area_name:
            payload["area_name"] = area_name
        logger.info(f"–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: –ø–æ –∏–º–µ–Ω–∏. Payload: {payload}")
    else:
        payload["object_type"] = normalized_type
        if not area_name:
             return [{"type": "text", "content": f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ '{raw_object_name}'?"}]
        payload["area_name"] = area_name
        logger.info(f"–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: –ø–æ —Ç–∏–ø—É. Payload: {payload}")

    try:
        url = f"{API_URLS['show_map_infrastructure']}?debug_mode={str(debug_mode).lower()}"
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {url} —Å payload: {payload}")
        
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            content_type = resp.headers.get('Content-Type', '').lower()
            
            if 'application/json' not in content_type:
                logger.error(f"API –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. Status: {resp.status}, Content-Type: {content_type}")
                if resp.status == 404: return [{"type": "text", "content": f"–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."}]
                elif resp.status == 500: return [{"type": "text", "content": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã."}]
                else: return [{"type": "text", "content": "–°–µ—Ä–≤–µ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç."}]

            data = await resp.json()

            user_settings = get_user_settings(user_id)
            is_stand_session_active = False
            if user_settings.get("on_stand"):
                last_active_time = user_settings.get("stand_last_active", 0)
                time_elapsed = time.time() - last_active_time
            
                if time_elapsed < STAND_SESSION_TIMEOUT:
                    is_stand_session_active = True
                    update_user_settings(user_id, {"stand_last_active": time.time()})
                    logger.info(f"[{user_id}] –°–µ—Å—Å–∏—è '—É —Å—Ç–µ–Ω–¥–∞' –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∞.")
                else:
                    update_user_settings(user_id, {"on_stand": False, "stand_last_active": None})
                    logger.info(f"[{user_id}] –°–µ—Å—Å–∏—è '—É —Å—Ç–µ–Ω–¥–∞' –∏—Å—Ç–µ–∫–ª–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –§–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω.")
            if is_stand_session_active:
                logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ç–µ–Ω–¥–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.")
                
                external_ids = []
                if "objects" in data and isinstance(data["objects"], list):
                    for obj in data["objects"]:
                        if isinstance(obj, dict) and obj.get("external_id"):
                            external_ids.append(obj["external_id"])

                if external_ids:
                    logger.info(f"[{user_id}] –ù–∞–π–¥–µ–Ω–æ {len(external_ids)} external_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {external_ids}")
                    stand_payload = {
                        "items": [{"id": ext_id} for ext_id in external_ids],
                        "secret_key": STAND_SECRET_KEY
                    }
                    
                    try:
                        stand_url = API_URLS['stand_endpoint']
                        async with session.post(stand_url, json=stand_payload, timeout=10) as stand_resp:
                            if stand_resp.ok:
                                logger.info(f"[{user_id}] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–µ–Ω–¥–∞. –°—Ç–∞—Ç—É—Å: {stand_resp.status}")
                            else:
                                stand_text = await stand_resp.text()
                                logger.warning(f"[{user_id}] –≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–µ–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {stand_resp.status}: {stand_text}")
                    except Exception as e:
                        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–µ–Ω–¥–∞: {e}", exc_info=True)
                else:
                    logger.info(f"[{user_id}] –í –æ—Ç–≤–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API –Ω–µ –Ω–∞–π–¥–µ–Ω–æ 'external_id'. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
            if not resp.ok:
                error_msg = data.get('error', f'–û—à–∏–±–∫–∞ {resp.status}')
                logger.error(f"API –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
                return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {error_msg}"}]

            if data.get("static_map") and data.get("interactive_map"):
                caption = data.get("answer", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –∫–∞—Ä—Ç–µ.")
                base_url = "https://testecobot.ru/maps/"
                static_filename = data["static_map"].replace(base_url, "")
                interactive_filename = data["interactive_map"].replace(base_url, "")
                s_encoded = base_url + quote(static_filename)
                i_encoded = base_url + quote(interactive_filename)
                return [{"type": "map", "static": s_encoded, "interactive": i_encoded, "caption": caption}]
            else:
                text_response = data.get("answer", "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                if data.get("objects"):
                    objects_list = [obj["name"] for obj in data.get("objects", []) if "name" in obj]
                    if objects_list:
                        text_response += f"\n\n–ù–∞–π–¥–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã:\n‚Ä¢ " + "\n‚Ä¢ ".join(objects_list)
                return [{"type": "text", "content": text_response}]
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        return [{"type": "text", "content": "–°–µ—Ä–≤–µ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_draw_map_of_infrastructure: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ."}]

async def handle_objects_in_polygon(session: aiohttp.ClientSession, analysis: dict, debug_mode: bool) -> list:
    geo_nom = analysis.get("secondary_entity", {}).get("name")
    if not geo_nom:
        logger.error("–û—à–∏–±–∫–∞ –≤ handle_objects_in_polygon: –Ω–µ –Ω–∞–π–¥–µ–Ω `secondary_entity` –≤ –∞–Ω–∞–ª–∏–∑–µ.")
        return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤."}]
    
    url = f"{API_URLS['objects_in_polygon']}?debug_mode={str(debug_mode).lower()}"
    payload = {"name": geo_nom, "buffer_radius_km": 5}
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ `objects_in_polygon` —Å payload: {payload}")
    
    try:
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok:
                logger.error(f"API `objects_in_polygon` –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {resp.status} –¥–ª—è '{geo_nom}'")
                return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è '{geo_nom}'."}]
            
            data = await resp.json()
            objects_list = data.get("all_biological_names", [])

            if objects_list:
                caption = f"üó∫Ô∏è **–í —Ä–∞–π–æ–Ω–µ ¬´{geo_nom}¬ª —è –Ω–∞—à–µ–ª {len(objects_list)} –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.**\n\n–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫—Ä–∞—Ç–∫–∏–π —É–º–Ω—ã–π –æ–±–∑–æ—Ä –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫?"
            else:
                caption = f"–í —Ä–∞–π–æ–Ω–µ ¬´{geo_nom}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–Ω–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤."

            buttons = []
            if len(objects_list) > 0:
                buttons.append([
                    {"text": "üéØ –£–º–Ω—ã–π –æ–±–∑–æ—Ä", "callback_data": f"explore:overview:{geo_nom}"},
                    {"text": "üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫", "callback_data": f"explore:full_list:{geo_nom}"}
                ])
            
            interactive_map_url = data.get("interactive_map")
            if interactive_map_url:
                buttons.append([
                    {"text": "üåç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ", "url": interactive_map_url}
                ])
            if data.get("static_map"):
                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è '{geo_nom}'. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.")
                return [{
                    "type": "clarification_map",
                    "static_map": data["static_map"],
                    "content": caption,
                    "buttons": buttons
                }]
            else:
                logger.debug(f"–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{geo_nom}'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.")
                return [{
                    "type": "clarification",
                    "content": caption,
                    "buttons": buttons
                }]

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `handle_objects_in_polygon`: {e}", exc_info=True)
        return [{"type": "text", "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ ¬´{geo_nom}¬ª."}]

async def handle_geo_request(session: aiohttp.ClientSession, analysis: dict, user_id: str, original_query: str, debug_mode: bool) -> list:
    primary_entity = analysis.get("primary_entity") or {}
    secondary_entity = analysis.get("secondary_entity") or {}

    location_name = secondary_entity.get("name", "")
    if not location_name and primary_entity.get("type") == "GeoPlace":
        location_name = primary_entity.get("name", "")
    
    raw_entity_name = primary_entity.get("name")
    entity_category = primary_entity.get("category", "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    canonical_entity_name = normalize_entity_name(raw_entity_name)
    
    specific_types_list = []
    if canonical_entity_name:
        if canonical_entity_name in GROUP_ENTITY_MAP:
            specific_types_list = GROUP_ENTITY_MAP[canonical_entity_name]
        else:
            specific_types_list = [canonical_entity_name]
    
    baikal_relation = determine_baikal_relation(
        query=original_query,
        entity_name=primary_entity.get("name", ""),
        entity_type=primary_entity.get("type", "")
    )
    
    location_info = {"nearby_places": []}
    
    if baikal_relation:
        import re
        baikal_pattern = re.compile(r'–±–∞–π–∫–∞–ª?[–∞-—è]*')
        if location_name and not baikal_pattern.search(location_name.lower()):
            location_info["exact_location"] = location_name
            location_info["region"] = ""
        else:
            location_info["exact_location"] = ""
            location_info["region"] = ""
    else:
        location_info["exact_location"] = location_name
        location_info["region"] = ""
    
    geo_type_payload = {
        "primary_type": [entity_category],
        "specific_types": specific_types_list
    }
        
    payload = {
        "location_info": location_info,
        "geo_type": geo_type_payload
    }
    
    if baikal_relation:
        payload["baikal_relation"] = baikal_relation
    
    url = f"{API_URLS['find_geo_special_description']}?query={original_query}&use_gigachat_answer=true&debug_mode={str(debug_mode).lower()}"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ `find_geo_special_description` —Å payload: {payload}")
    
    try:
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok:
                return [{"type": "text", "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."}]
            
            data = await resp.json()
            user_settings = get_user_settings(user_id)
            is_stand_session_active = False
            if user_settings.get("on_stand"):
                last_active_time = user_settings.get("stand_last_active", 0)
                time_elapsed = time.time() - last_active_time
                
                if time_elapsed < STAND_SESSION_TIMEOUT:
                    is_stand_session_active = True
                    update_user_settings(user_id, {"stand_last_active": time.time()})
                    logger.info(f"[{user_id}] –°–µ—Å—Å–∏—è '—É —Å—Ç–µ–Ω–¥–∞' –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∞.")
                else:
                    update_user_settings(user_id, {"on_stand": False, "stand_last_active": None})
                    logger.info(f"[{user_id}] –°–µ—Å—Å–∏—è '—É —Å—Ç–µ–Ω–¥–∞' –∏—Å—Ç–µ–∫–ª–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –§–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω.")
            if is_stand_session_active:
                logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ç–µ–Ω–¥–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø. –ª–æ–≥–∏–∫—É –¥–ª—è handle_geo_request.")
                
                external_ids = []
                if "external_ids" in data and isinstance(data.get("external_ids"), list):
                    external_ids = data["external_ids"]
                
                if external_ids:
                    logger.info(f"[{user_id}] –ù–∞–π–¥–µ–Ω–æ {len(external_ids)} external_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {external_ids}")
                    stand_payload = {
                        "items": [{"id": ext_id} for ext_id in external_ids],
                        "secret_key": STAND_SECRET_KEY
                    }
                    try:
                        stand_url = API_URLS['stand_endpoint']
                        async with session.post(stand_url, json=stand_payload, timeout=10) as stand_resp:
                            if stand_resp.ok:
                                logger.info(f"[{user_id}] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–µ–Ω–¥–∞. –°—Ç–∞—Ç—É—Å: {stand_resp.status}")
                            else:
                                stand_text = await stand_resp.text()
                                logger.warning(f"[{user_id}] –≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–µ–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {stand_resp.status}: {stand_text}")
                    except Exception as e:
                        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–µ–Ω–¥–∞: {e}", exc_info=True)
                else:
                    logger.info(f"[{user_id}] –í –æ—Ç–≤–µ—Ç–µ API find_geo_special_description –Ω–µ –Ω–∞–π–¥–µ–Ω–æ 'external_id' –≤ meta_info. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")

            final_responses = []

            gigachat_answer = data.get("gigachat_answer")
            if gigachat_answer and gigachat_answer.strip():
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat.")
                final_responses.append({"type": "text", "content": gigachat_answer.strip()})

            elif descriptions := data.get("descriptions"):
                logger.info("–û—Ç–≤–µ—Ç GigaChat –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò—â–µ–º –≤ 'descriptions'.")
                first_valid_index = -1
                for i, desc in enumerate(descriptions):
                    if content := desc.get("content"):
                        if content.strip():
                            final_responses.append({"type": "text", "content": content.strip()})
                            first_valid_index = i
                            break
                
                if first_valid_index != -1:
                    remaining_titles = []
                    for desc in descriptions[first_valid_index + 1:]:
                        if title := desc.get("title"):
                            if title.strip():
                                remaining_titles.append(title.strip())
                        if len(remaining_titles) >= 10:
                            break
                    
                    if remaining_titles:
                        title_list_str = "\n".join(f"‚Ä¢ {title}" for title in remaining_titles)
                        full_title_message = f"–¢–∞–∫–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã:\n{title_list_str}"
                        final_responses.append({"type": "text", "content": full_title_message})

            if not final_responses:
                 final_responses.append({"type": "text", "content": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."})

            return final_responses

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `handle_geo_request`: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."}]
 