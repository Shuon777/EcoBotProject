import aiohttp
import asyncio
import logging
from typing import Dict, Any
from config import API_URLS, DEFAULT_TIMEOUT, GIGACHAT_TIMEOUT, GIGACHAT_FALLBACK_URL
from utils.settings_manager import get_user_settings
from utils.context_manager import RedisContextManager

logger = logging.getLogger(__name__)

def get_user_fallback_setting(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ fallback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return get_user_settings(user_id).get("gigachat_fallback", False)

async def call_gigachat_fallback_service(session: aiohttp.ClientSession, question: str) -> str | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É GigaChat —Å–µ—Ä–≤–∏—Å—É."""
    url = GIGACHAT_FALLBACK_URL
    try:
        payload = {"question": question}
        async with session.post(url, json=payload, timeout=GIGACHAT_TIMEOUT) as response:
            if response.ok:
                data = await response.json()
                return data.get("answer")
            else:
                logger.error(f"Fallback-—Å–µ—Ä–≤–∏—Å GigaChat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} {await response.text()}")
                return None
    except Exception as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ fallback-—Å–µ—Ä–≤–∏—Å—É GigaChat: {e}")
        return None

async def check_simplified_search(session: aiohttp.ClientSession, object_nom: str, features: dict, debug_mode: bool) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    try:
        url = f"{API_URLS['search_images']}?debug_mode={str(debug_mode).lower()}"
        payload = {"species_name": object_nom, "features": features}
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {object_nom} —Å features: {features}")
        
        async with session.post(url, json=payload, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                has_images = bool(data.get("images"))
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {object_nom} {features}: {has_images}")
                return has_images
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ {object_nom}")
            return False
    except asyncio.TimeoutError:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {object_nom}")
        return False
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {object_nom}: {e}")
        return False

async def handle_get_picture(session: aiohttp.ClientSession, analysis: dict, user_id: str, debug_mode: bool) -> list:
    logger.info(f"--- –ó–∞–ø—É—Å–∫ handle_get_picture —Å analysis: {analysis} ---")
    
    primary_entity = analysis.get("primary_entity", {})
    object_nom = primary_entity.get("name")
    attributes = analysis.get("attributes", {})
    
    if not object_nom:
        return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."}]

    features = {}
    if attributes.get("season"): features["season"] = attributes["season"]
    if attributes.get("habitat"): features["habitat"] = attributes["habitat"]
    if attributes.get("state") == "—Ü–≤–µ—Ç–µ–Ω–∏–µ": features["flowering"] = True

    url = f"{API_URLS['search_images']}?debug_mode={str(debug_mode).lower()}"
    payload = {"species_name": object_nom, "features": features}

    try:
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok or not (await resp.json()).get("images"):
                logger.warning(f"[{user_id}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è '{object_nom}' —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ {features} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ fallback.")
                
                if not attributes:
                    return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è ¬´{object_nom}¬ª."}]

                fallback_options = []
                if "season" in attributes:
                    test_features = features.copy(); test_features.pop("season")
                    if await check_simplified_search(session, object_nom, test_features, debug_mode):
                        fallback_options.append({"text": "‚ùÑÔ∏è –ë–µ–∑ —Å–µ–∑–æ–Ω–∞", "callback_data": f"fallback:no_season:{object_nom}"})
                
                if "habitat" in attributes:
                    test_features = features.copy(); test_features.pop("habitat")
                    if await check_simplified_search(session, object_nom, test_features, debug_mode):
                        fallback_options.append({"text": "üå≤ –ë–µ–∑ –º–µ—Å—Ç–∞", "callback_data": f"fallback:no_habitat:{object_nom}"})

                if await check_simplified_search(session, object_nom, {}, debug_mode):
                    fallback_options.append({"text": "üñºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç", "callback_data": f"fallback:basic:{object_nom}"})
                
                if not fallback_options:
                    return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è ¬´{object_nom}¬ª —Å –ª—é–±—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."}]

                context_manager = RedisContextManager()
                fallback_key = f"fallback_attributes:{user_id}"
                await context_manager.set_context(fallback_key, attributes)
                await context_manager.redis_client.expire(fallback_key, 600)
                logger.info(f"[{user_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è fallback: {attributes}")
                
                buttons = [fallback_options[i:i+2] for i in range(0, len(fallback_options), 2)]
                
                return [{"type": "clarification", 
                         "content": f"üñºÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å? –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:",
                         "buttons": buttons}]

            data = await resp.json()
            images = data.get("images", [])
            messages = [{"type": "image", "content": img["image_path"]} for img in images[:5] if isinstance(img, dict) and "image_path" in img]
            
            if not messages:
                 return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ¬´{object_nom}¬ª."}]
            return messages

    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_get_picture: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."}]

async def handle_get_description(session: aiohttp.ClientSession, analysis: dict, user_id: str, original_query: str, debug_mode: bool) -> list:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞.
    - –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç API.
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é ("–ü–æ–∏—Å–∫–∞—Ç—å –µ—â–µ").
    - –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GigaChat fallback.
    """
    primary_entity = analysis.get("primary_entity", {})
    object_nom = primary_entity.get("name")
    offset = analysis.get("offset", 0)

    if not object_nom:
        return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è."}]
        
    find_url = f"{API_URLS['find_species_with_description']}"
    payload = {"name": object_nom, "limit": 4, "offset": offset} 
    logger.debug(f"[{user_id}] –ó–∞–ø—Ä–æ—Å –∫ `find_species_with_description` —Å payload: {payload}")

    try:
        async with session.post(find_url, json=payload, timeout=DEFAULT_TIMEOUT) as find_resp:
            if not find_resp.ok:
                logger.error(f"[{user_id}] API `find_species` –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {find_resp.status} –¥–ª—è '{object_nom}'")
                return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ¬´{object_nom}¬ª."}]
            
            data = await find_resp.json()
            status = data.get("status")
            logger.debug(f"[{user_id}] –û—Ç–≤–µ—Ç –æ—Ç `find_species`: status='{status}', matches={data.get('matches')}")

            if status == "ambiguous":
                matches = data.get("matches", [])
                
                context_to_save = {
                    "options": matches,
                    "original_term": object_nom, 
                    "offset": offset             
                }

                context_manager = RedisContextManager()
                options_key = f"clarify_options:{user_id}"
                await context_manager.set_context(options_key, context_to_save)
                await context_manager.redis_client.expire(options_key, 300)

                buttons = []
                for i, match_name in enumerate(matches):
                    buttons.append([{"text": match_name, "callback_data": f"clarify_idx:{i}"}])
                
                system_buttons_row = []
                
                if matches:
                    system_buttons_row.append({"text": "üé≤ –õ—é–±—É—é", "callback_data": "clarify_idx:0"})

                
                if data.get("has_more", False):
                    system_buttons_row.append({"text": "üîç –ü–æ–∏—Å–∫–∞—Ç—å –µ—â–µ", "callback_data": "clarify_more"})
                
                
                if system_buttons_row:
                    buttons.append(system_buttons_row)

                return [{
                    "type": "clarification",
                    "content": f"–Ø –∑–Ω–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –¥–ª—è ¬´{object_nom}¬ª. –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "buttons": buttons
                }]

            elif status == "found":
                canonical_name = data.get("matches", [object_nom])[0]
                user_settings = get_user_settings(user_id)
                stoplist_enabled = user_settings.get("stoplist_enabled", True)
                stoplist_param = 2 if stoplist_enabled else 1
            
                desc_url = (f"{API_URLS['get_description']}?species_name={canonical_name}"
                            f"&debug_mode={str(debug_mode).lower()}"
                            f"&in_stoplist={stoplist_param}"
                            f"&query={original_query}")
                
                logger.info(f"[{user_id}] –û–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: '{canonical_name}'. –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ URL: {desc_url}")

                async with session.get(desc_url, timeout=DEFAULT_TIMEOUT) as desc_resp:
                    if desc_resp.ok:
                        desc_data = await desc_resp.json()
                        descriptions = desc_data.get("descriptions", [])
                        text = ""
                        
                        if descriptions:
                            first_item = descriptions[0]
                            if isinstance(first_item, dict):
                                text = first_item.get("content", "")
                            elif isinstance(first_item, str):
                                text = first_item
                        
                        if text:
                            logger.info(f"[{user_id}] –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{canonical_name}' —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                            return [{"type": "text", "content": text, "canonical_name": canonical_name}]
                    elif desc_resp.status == 400:
                        desc_data = await desc_resp.json()
                        return [{"type": "text", "content": desc_data.get("error", "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç")}]
            logger.warning(f"[{user_id}] –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{object_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤.")
            
            if get_user_fallback_setting(user_id):
                logger.info(f"[{user_id}] –ó–∞–ø—É—Å–∫–∞–µ–º GigaChat fallback –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{original_query}'")
                fallback_answer = await call_gigachat_fallback_service(session, original_query)
                if fallback_answer: 
                    return [{"type": "text", "content": f"**–û—Ç–≤–µ—Ç –æ—Ç GigaChat:**\n\n{fallback_answer}", "parse_mode": "Markdown"}]
            
            return [{"type": "text", "content": f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ¬´{object_nom}¬ª."}]

    except Exception as e:
        logger.error(f"[{user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `handle_get_description`: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É –æ–ø–∏—Å–∞–Ω–∏–π."}]

