from langchain_core.prompts import ChatPromptTemplate

class GeoPrompts:
    """Промпты для географических запросов"""
    
    @staticmethod
    def geo_check_prompt() -> ChatPromptTemplate:
        """Определяет тип географического запроса"""
        return ChatPromptTemplate.from_messages([
            ("system", """
    ## РОЛЕВАЯ МОДЕЛЬ:
    Ты определяешь ТИП географического запроса о Байкальском регионе.

    ## КРИТИЧЕСКИ ВАЖНО - РАЗДЕЛЕНИЕ:
    ГЕОГРАФИЧЕСКИЕ: музеи, памятники, заповедники, заказники, научные учреждения, достопримечательности
    БИОЛОГИЧЕСКИЕ: растения, животные, птицы, рыбы, насекомые, природа

    ## ГЕОГРАФИЧЕСКИЕ ЗАПРОСЫ - ТОЛЬКО:
    - Объекты инфраструктуры и достопримечательности
    - Природоохранные территории КАК ОРГАНИЗАЦИИ
    - Научные и культурные учреждения

    ## БИОЛОГИЧЕСКИЕ ЗАПРОСЫ - not_geo:
    - Любые живые организмы
    - Природные явления
    - Фотографии и описания природы

    ## ОТВЕТ ТОЛЬКО ОДНИМ СЛОВОМ: geo_list, geo_info, geo_count или not_geo

    ## ПРИМЕРЫ РАЗДЕЛЕНИЯ:

    ### ГЕОГРАФИЧЕСКИЕ:
    "Музеи в Бодайбо" -> geo_list
    "Какие заповедники на Байкале?" -> geo_list  
    "Расскажи про Баргузинский заповедник" -> geo_info
    "Сколько музеев в Иркутске?" -> geo_count

    ### БИОЛОГИЧЕСКИЕ (not_geo):
    "Покажи нерпу" -> not_geo
    "Как выглядит эдельвейс" -> not_geo
    "Где растет багульник?" -> not_geo
    "Какие птицы на Байкале?" -> not_geo
    "Фото омуля" -> not_geo

    ### НЕПОЛНЫЕ ГЕОГРАФИЧЕСКИЕ (not_geo - станут unknown):
    "а заказники?" -> not_geo
    "музеи" -> not_geo  
    "а в Братске?" -> not_geo
    "памятники" -> not_geo
    """),
            ("human", "Запрос: `{query}`")
        ])
    
    @staticmethod
    def geo_entity_extraction_prompt() -> ChatPromptTemplate:
        """Извлекает сущности для географических запросов"""
        return ChatPromptTemplate.from_messages([
            ("system", """
## РОЛЕВАЯ МОДЕЛЬ:
Ты извлекаешь сущности ТОЛЬКО для географических запросов о Байкальском регионе.

## ФОРМАТ ОТВЕТА - ТОЛЬКО JSON:
{{
  "location_info": {{
    "exact_location": "максимально точное местоположение",
    "region": "регион/район расположения",
    "nearby_places": []
  }},
  "geo_type": {{
    "primary_type": ["конкретные типы географического объекта"],
    "specific_types": ["конкретные подтипы"]
  }}
}}

## ПРАВИЛА ИЗВЛЕЧЕНИЯ:
- location_info.exact_location: город, поселок, конкретное место (может быть пустым)
- location_info.region: область, район (если не указано прямо в запросе, то пустой, ВАЖНО: не дополняй сам) 
- location_info.nearby_places: пока всегда пустой список []
- geo_type.primary_type: ["Природный объект", "Населенные пункты", "Достопримечательности"]
- geo_type.specific_types: ["Музеи", "Памятники", "Заповедники", "Наука" и т.д.]

## ВАЖНО: Некоторые поля могут быть пустыми (НО не ставь null - просто "") или содержать пустые списки!

## ПРИМЕРЫ:

Запрос: "Расскажи о музеях в Бодайбо"
Результат:
{{
  "location_info": {{
    "exact_location": "Бодайбо",
    "region": "",
    "nearby_places": []
  }},
  "geo_type": {{
    "primary_type": ["Достопримечательности"],
    "specific_types": ["Музеи"]
  }}
}}

Запрос: "Какие научные учреждения есть около Байкала?"
Результат:
{{
  "location_info": {{
    "exact_location": "Байкал",
    "region": "",
    "nearby_places": []
  }},
  "geo_type": {{
    "primary_type": ["Достопримечательности"],
    "specific_types": ["Наука"]
  }}
}}

Запрос: "Какие заповедные места есть на Байкале?"
Результат:
{{
  "location_info": {{
    "exact_location": "Байкал", 
    "region": null,
    "nearby_places": []
  }},
  "geo_type": {{
    "primary_type": ["Достопримечательности"],
    "specific_types": ["Заповедники", "Национальные парки"]
  }}
}}

Запрос: "Сколько музеев в Иркутске?"
Результат:
{{
  "location_info": {{
    "exact_location": "Иркутск",
    "region": "",
    "nearby_places": []
  }},
  "geo_type": {{
    "primary_type": ["Достопримечательности"],
    "specific_types": ["Музеи"]
  }}
}}

Запрос: "что интересного есть рядом с поселком Баргузин?"
Результат:
{{
  "location_info": {{
    "exact_location": "Баргузин",
    "region": "",
    "nearby_places": []
  }},
  "geo_type": {{
    "primary_type": ["Достопримечательности"],
    "specific_types": []
  }}
}}

Запрос: "расскажи про Баргузинский заповедник"
Результат:
{{
  "location_info": {{
    "exact_location": "",
    "region": "", 
    "nearby_places": []
  }},
  "geo_type": {{
    "primary_type": ["Природный объект", "Достопримечательности"],
    "specific_types": ["Заповедники"]
  }}
}}
"""),
            ("human", "Запрос: `{query}`")
        ])


class StandardPrompts:
    """Промпты для стандартных (биологических) запросов"""
    
    @staticmethod
    def intent_detection_prompt() -> ChatPromptTemplate:
        """Определяет намерение для стандартных запросов"""
        return ChatPromptTemplate.from_messages([
            ("system", """
Твоя задача — определить **главную цель** пользователя по его запросу и сопоставить её с одним из намерений.

## ВОЗМОЖНЫЕ НАМЕРЕНИЯ:
- `get_picture`: пользователь хочет **увидеть, как выглядит** объект.
- `get_location`: пользователь хочет **узнать ареал обитания** объекта, где он встречается в целом.
- `get_intersection_object_on_map`: ищет объект **рядом с конкретным местом**.
- `get_text`: хочет получить **текстовое описание, факт, справку**.
- `get_objects_in_polygon`: хочет узнать, **что находится в конкретной локации**.
- `unknown`: намерение неясно, это короткое уточнение или нецелевой запрос.

## ПРАВИЛА ОПРЕДЕЛЕНИЯ:
1.  **Анализируй суть, а не слова:** Не полагайся только на отдельные глаголы вроде "покажи" или "где". Анализируй всю фразу, чтобы понять, что **именно** пользователь хочет узнать.
2.  **Определи основной вопрос:** Подумай, на какой из этих вопросов отвечает запрос пользователя:
    - "Как он выглядит?" -> `get_picture`
    - "Где он встречается в целом?" -> `get_location`
    - "Расскажи мне о нём" -> `get_text`
3.  **Короткие уточнения -> `unknown`:** Если запрос короткий (1-3 слова) и не содержит явного вопроса или действия, он зависит от контекста. В этом случае смело отвечай `unknown`.

Проанализируй запрос и ответь ТОЛЬКО ОДНИМ СЛОВОМ — названием намерения.

## ПРИМЕРЫ:

### Явные запросы
- Ввод: "расскажи про иву" -> Вывод: get_text
- Ввод: "какие животные есть на Ольхоне" -> Вывод: get_objects_in_polygon
- Ввод: "Покажи лиственницу сибирскую на болоте" -> Вывод: get_picture

### Запросы с неоднозначными глаголами (здесь важен объект действия)
- Ввод: "Покажи эдельвейс" -> Вывод: get_picture
- Ввод: "Покажи ареал эдельвейса" -> Вывод: get_location
- Ввод: "где найти кедр" -> Вывод: get_location
- Ввод: "где найти кедр рядом с Култуком" -> Вывод: get_intersection_object_on_map

### Неявные запросы (твой ответ должен быть 'unknown')
- Ввод: "А эдельвейс?" -> Вывод: unknown
- Ввод: "А зимой?" -> Вывод: unknown
- Ввод: "даурский еж" -> Вывод: unknown
"""),
            ("human", "{query}")
        ])
    
    @staticmethod
    def entity_extraction_prompt(intent: str) -> ChatPromptTemplate:
        """Извлекает сущности для стандартных запросов"""
        # --- БАЗОВАЯ ЧАСТЬ ПРОМПТА ---
        base_prompt = """## РОЛЕВАЯ МОДЕЛЬ:
Ты — высокоточный и внимательный парсер-аналитик запросов о флоре и фауне Байкала.
Твоя задача — проанализировать запрос пользователя с уже известным намерением и извлечь из него СТРОГО ОПРЕДЕЛЕННЫЙ набор сущностей.
Результат необходимо вернуть в формате JSON без каких-либо пояснений.

## ОПИСАНИЕ ПОЛЕЙ JSON:
- `object`: Название биологического объекта (животное, растение). Приводи его к именительному падежу. Например, "нерпой" -> "нерпа". Если объект не упомянут, верни `null`.
- `geo_place`: Название географического места (город, остров, мыс, река). Если не упомянуто, верни `null`. geo_place - конкретный топоним (например Култук, Малое море...), он не может быть абстрактным (например, болото, лес, луг). Приводи его к именительному падежу. Например, "малом море" -> "Малое море"
- `features`: JSON-объект с дополнительными признаками объекта. Если признаков нет, верни пустой объект `{{}}`. Возможные ключи и значения:
    - `season`: "Зима", "Весна", "Лето", "Осень".
    - `habitat`: "Лес", "Поле", "Горы", "Побережье", "На дереве", "В воде", "На болоте", "На лугу".
    - `flowering`: `true`, если в запросе есть слова "цветение", "цветущий", "в цвету" и т.п.
    - `fruits_present`: "Шишка", "Ягода", "Плод", "Орех", "Желудь", если в запросе упоминаются плоды.
- `unsupported_features`: Список строк с признаками, которые ты не можешь классифицировать по словарю `features`. Это редкие, небиологические описания. Например: "на фоне заката", "рядом с машиной", "в смешной шапке". Если таких нет, верни пустой список `[]`.
- `can_fulfill`: Булево значение. Установи `false` ТОЛЬКО ЕСЛИ список `unsupported_features` НЕ ПУСТОЙ. Во всех остальных случаях — `true`.

## ИНСТРУКЦИИ ПО ИЗВЛЕЧЕНИЮ (ВАЖНО!)
В зависимости от намерения (`intent`), тебе нужно сфокусироваться на извлечении только определенных полей. Остальные поля должны иметь значения по умолчанию (`null`, `{{}}`, `[]`).
**[ВАЖНО] Если `intent` равен `unknown`:** Это значит, что запрос — контекстное уточнение. Твоя задача — просто извлечь ВСЕ сущности, которые ты видишь в тексте, ничего не додумывая.
"""

        # --- ДИНАМИЧЕСКАЯ ЧАСТЬ ПРОМПТА В ЗАВИСИМОСТИ ОТ НАМЕРЕНИЯ ---
        intent_specific_instructions = ""
        if intent == "get_picture":
            intent_specific_instructions = """- **Задача для `get_picture`:** Извлеки `object` и любые `features`. Поля `geo_place` и `unsupported_features` вторичны.
- **Пример:** "Покажи фото цветущей черёмухи весной в лесу" -> извлекаются `object`, `features.flowering`, `features.season`, `features.habitat`."""
        
        elif intent == "get_location":
            intent_specific_instructions = """- **Задача для `get_location`:** Извлеки только `object`.
- **Пример:** "Где растёт багульник?" -> извлекается только `object`."""
            
        elif intent == "get_intersection_object_on_map":
            intent_specific_instructions = """- **Задача для `get_intersection_object_on_map`:** Извлеки `object` и `geo_place`. Это самые важные поля.
- **Пример:** "Где найти сибирский кедр рядом с посёлком Култук?" -> извлекаются `object` и `geo_place`."""
            
        elif intent == "get_objects_in_polygon":
            intent_specific_instructions = """- **Задача для `get_objects_in_polygon`:** Извлеки только `geo_place`.
- **Пример:** "Какая флора растет на острове Ольхон?" -> извлекается только `geo_place`."""
            
        elif intent == "get_text":
            intent_specific_instructions = """- **Задача для `get_text`:** Извлеки только `object`.
- **Пример:** "Расскажи мне о байкальской нерпе" -> извлекается только `object`."""

        # --- ПРИМЕРЫ ДЛЯ ОБУЧЕНИЯ МОДЕЛИ ---
        examples = """
## ПРИМЕРЫ:

**Запрос:** "Как выглядит эдельвейс?"
**Намерение:** `get_picture`
**Результат:**```json
{{
  "object": "эдельвейс",
  "geo_place": null,
  "features": {{}},
  "unsupported_features": [],
  "can_fulfill": true
}}
**Запрос:** "Покажи лиственницу сибирскую на болоте"
**Намерение:** `get_picture`
**Результат:**
{{
  "object": "лиственница сибирская",
  "geo_place": null,
  "features": {{
    "habitat": "Болото"
  }},
  "unsupported_features": [],
  "can_fulfill": true
}}
Запрос: "Покажи мне фото белки с шишкой зимой в лесу"
Намерение: get_picture
Результат:
{{
  "object": "белка",
  "geo_place": null,
  "features": {{
    "fruits_present": "Шишка",
    "season": "Зима",
    "habitat": "Лес"
  }},
  "unsupported_features": [],
  "can_fulfill": true
}}

Запрос: "Где можно встретить Ольхонскую полевку рядом с Култуком"
Намерение: get_intersection_object_on_map
Результат:
{{
  "object": "Ольхонская полевка",
  "geo_place": "Култук",
  "features": {{}},
  "unsupported_features": [],
  "can_fulfill": true
}}

Запрос: "Какую флору я могу встретить на Малом море"
Намерение: get_objects_in_polygon
Результат: 
{{
  "object": null,
  "geo_place": "Малое море",
  "features": {{}},
  "unsupported_features": [],
  "can_fulfill": true
}}

Запрос: "Покажи чайку на фоне колеса обозрения"
Намерение: get_picture
Результат:  
{{
  "object": "чайка",
  "geo_place": null,
  "features": {{}},
  "unsupported_features": ["на фоне колеса обозрения"],
  "can_fulfill": false
}}
Запрос: "А эдельвейс?"
Намерение: unknown
Результат:  
{{
  "object": "эдельвейс",
  "geo_place": null,
  "features": {{}},
  "unsupported_features": [],
  "can_fulfill": true
}}
Запрос: "А зимой?"
Намерение: unknown
Результат:
{{
  "object": null,
  "geo_place": null,
  "features": {{
    "season": "Зима"
  }},
  "unsupported_features": [],
  "can_fulfill": true
}}
  
"""
        # Собираем финальный промпт
        final_prompt = f"{base_prompt}\n{intent_specific_instructions}\n{examples}"

        return ChatPromptTemplate.from_messages([
                ("system", final_prompt),
                ("human", "Проанализируй следующий запрос с уже известным намерением.\nНамерение: `{intent}`\nЗапрос: `{query}`")
            ])
    
    @staticmethod
    def category_detection_prompt() -> ChatPromptTemplate:
        """Определяет категорию биологического объекта"""
        return ChatPromptTemplate.from_messages([
            ("system", """
    Твоя задача — определить общую биологическую категорию для указанного объекта.
    Ответь ТОЛЬКО ОДНИМ СЛОВОМ из предложенного спика. Никаких пояснений.

    ## ВОЗМОЖНЫЕ КАТЕГОРИИ:
    - Дерево
    - Кустарник
    - Трава
    - Млекопитающее
    - Птица
    - Рыба
    - Насекомое
    - Другое

    ## ПРИМЕРЫ:
    - Ввод: "лиственница сибирская" -> Вывод: Дерево
    - Ввод: "байкальская нерпа" -> Вывод: Млекопитающее
    - Ввод: "омуль" -> Вывод: Рыба
    - Ввод: "эдельвейс" -> Вывод: Трава
    - Ввод: "можжевельник" -> Вывод: Кустарник
    - Ввод: "остров Ольхон" -> Вывод: Другое
    """),
            ("human", "{object_name}")
        ])

# [НОВОЕ] Универсальный промпт, который станет основой всей NLU-логики GigaChat ветки
class UniversalPrompts:
    @staticmethod
    def analysis_prompt() -> ChatPromptTemplate:
        return ChatPromptTemplate.from_messages([
            ("system", """
## РОЛЬ
Ты — высокоточный NLU-аналитик. Твоя задача — разобрать запрос пользователя о Байкальском регионе и вернуть СТРОГО JSON с его полной структурой. Не добавляй никаких пояснений, только JSON.

## ФОРМАТ ВЫВОДА (JSON)
```json
{{
  "action": "...",
  "primary_entity": {{ "name": "...", "type": "..." }},
  "secondary_entity": {{ "name": "...", "type": "..." }},
  "attributes": {{ "season": "...", "habitat": "...", "state": "..." }}
}}

  

ПОЛЯ JSON: ОПИСАНИЕ

    action (string): Главное действие, которое хочет пользователь. Возможные значения:

        describe: Запрос текстового описания КОНКРЕТНОГО объекта ("расскажи", "что за", "опиши").

        show_image: Запрос изображения ("покажи фото", "как выглядит").

        show_map: Запрос карты ареала обитания в целом ("где растет", "покажи на карте", "ареал обитания").

        find_nearby: Поиск одного объекта рядом с другим ("...рядом с...", "...в районе...").

        list_items: Запрос СПИСКА объектов ("какие есть...", "список...", "какая флора...", "все музеи...").

        count_items: Запрос количества ("сколько...").

        unknown: Действие неясно или это уточняющий вопрос.

    primary_entity (object): Главный объект запроса (ЧТО ищем). entity.type: СТРОГО ОДИН ИЗ СПИСКА: Biological, GeoPlace, Infrastructure, Unknown.

    secondary_entity (object): Вспомогательный объект (ГДЕ ищем). entity.type: СТРОГО ОДИН ИЗ СПИСКА: Biological, GeoPlace, Infrastructure, Unknown.

    attributes (object): Дополнительные признаки или характеристики.

ПРАВИЛА
    1. Всегда возвращай ПОЛНУЮ структуру JSON, даже если поля null или {{}}.
    2. Правило для списков: Если пользователь спрашивает "какие...", "какая...", использует множественное число ("музеи") или общие категории ("флора"), его действие — list_items. describe — только для единичных объектов.
    3. Правило для уточнений: Если запрос является уточнением (не содержит явного основного объекта), твоя задача — извлечь из него ВСЮ новую информацию: это может быть action, attributes или secondary_entity. Если ты не можешь определить action, ставь unknown.
    4. Типы сущностей (примеры): "Заповедник", "музей", "памятник" — это Infrastructure. "Ольхон", "Байкал", "Ангара" — это GeoPlace. "Нерпа", "сосна" — это Biological.
    5. Все объекты на русском языке ставь в именительный падеж (примеры, "малом море" -> "Малое море", "лиственницу сибирскую" -> "лиственница сибирская", "Копеечника зундукского -> "Копеечник зундукский" ")
             
ПРИМЕРЫ

Запрос: "Расскажи про байкальскую нерпу"
Результат:  
{{"action": "describe", "primary_entity": {{ "name": "байкальская нерпа", "type": "Biological" }}, "secondary_entity": null, "attributes": {{}} }}

Запрос: "Покажи пихту сибирскую зимой"
Результат:   
{{"action": "show_image", "primary_entity": {{ "name": "пихта сибирская", "type": "Biological" }}, "secondary_entity": null, "attributes": {{ "season": "Зима" }} }}

Запрос: "Какая флора растет на малом море"
Результат:    
{{"action": "list_items", "primary_entity": {{ "name": "флора", "type": "Biological" }}, "secondary_entity": {{ "name": "Малое море", "type": "GeoPlace" }}, "attributes": {{}} }}

Запрос: "Расскажи о музеях в Бодайбо"
Результат:  
{{"action": "list_items", "primary_entity": {{ "name": "музеи", "type": "Infrastructure" }}, "secondary_entity": {{ "name": "Бодайбо", "type": "GeoPlace" }}, "attributes": {{}} }} 

Запрос: "А осенью?"
Результат:  
{{"action": "unknown", "primary_entity": null, "secondary_entity": null, "attributes": {{ "season": "Осень" }} }}

Запрос: "Покажи лиственницу сибирскую осенью на болоте"
Результат:  
{{"action": "show_image", "primary_entity": {{"name": "лиственница сибирская", "type": "Biological"}}, "secondary_entity": null, "attributes": {{"season": "Осень", "habitat": "Болото"}} }}
  
Запрос: "А где она растет?"
Результат:      
{{"action": "show_map", "primary_entity": null, "secondary_entity": null, "attributes": {{}} }}

Запрос: "что интересного есть рядом с поселком Баргузин?"
Результат: 
{{"action": "list_items", "primary_entity": {{ "name": "достопримечательности", "type": "Infrastructure" }}, "secondary_entity": {{ "name": "Баргузин", "type": "GeoPlace" }}, "attributes": {{}} }}

Запрос: "А копеечник зундукский?"
Результат:
{{"action": "unknown", "primary_entity": "копеечник зундукский", "secondary_entity": null, "attributes": {{}} }}

"""),
("human", "Проанализируй запрос: {query}")
])