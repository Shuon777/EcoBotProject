# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: logic/dialogue_manager.py ---

import logging
from typing import Dict, Any, Optional, Tuple

from utils.context_manager import RedisContextManager

logger = logging.getLogger(__name__)

ACTION_VERBS = ["—Ä–∞—Å—Å–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏", "–æ–ø–∏—à–∏", "–≤—ã–≥–ª—è–¥–∏—Ç", "–≥–¥–µ", "–Ω–∞–π—Ç–∏", "—Ä–∞—Å—Ç–µ—Ç", "–æ–±–∏—Ç–∞–µ—Ç", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å"]

class DialogueManager:
    def __init__(self, context_manager: RedisContextManager):
        self.context_manager = context_manager

    async def enrich_request(
        self, user_id: str, query: str, intent: str, entities: Dict[str, Any]
    ) -> Tuple[str, Dict[str, Any]]:
        if not self.context_manager.redis_client:
            return intent, entities

        user_context = await self.context_manager.get_context(user_id)
        history = user_context.get("history", [])
        last_item = history[0] if history else {}
        
        # üî¥ –î–û–ë–ê–í–ò–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–°–¢–û–†–ò–ò
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {history}")
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏: {last_item}")
        
        final_intent = intent
        final_entities = entities.copy()
        last_intent = last_item.get("intent")
        last_entities = last_item.get("entities", {})
        
        # üî¥ –î–û–ë–ê–í–ò–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• –°–£–©–ù–û–°–¢–ï–ô
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {last_entities}")
        
        is_ambiguous_query = len(query.split()) <= 3 and not any(verb in query.lower() for verb in ACTION_VERBS)

        # üîÑ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê
        geo_keywords = ["–∑–∞–∫–∞–∑–Ω–∏–∫", "–º—É–∑–µ–π", "–ø–∞–º—è—Ç–Ω–∏–∫", "–∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫", "–Ω–∞—É—á–Ω", "—É—á—Ä–µ–∂–¥–µ–Ω", "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]
        query_lower = query.lower()
        
        has_geo_keyword = any(keyword in query_lower for keyword in geo_keywords)
        last_was_geo = last_intent in ["get_geo_objects", "get_geo_info", "get_geo_count"]
        
        logger.info(f"has_geo_keyword: {has_geo_keyword}, last_was_geo: {last_was_geo}, last_intent: {last_intent}")
        
        # üîÑ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ò (–∏—Å—Ç–æ—Ä–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ò–õ–ò –∑–∞–ø—Ä–æ—Å –Ω–µ–ø–æ–ª–Ω—ã–π)
        if has_geo_keyword and (last_was_geo or is_ambiguous_query):
            if last_was_geo:
                # –ë–µ—Ä–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π intent –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                final_intent = last_intent
                logger.info(f"–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ + –∏—Å—Ç–æ—Ä–∏—è geo -> intent: {final_intent}")
            else:
                # –ù–æ–≤—ã–π –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
                final_intent = "get_geo_objects"
                logger.info(f"–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ -> intent: {final_intent}")
            
            # üîÑ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –æ–±–æ–≥–∞—â–∞–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –±—ã–ª–∞ geo –∏—Å—Ç–æ—Ä–∏—è
            if last_was_geo and last_entities:
                logger.info(f"–û–±–æ–≥–∞—â–∞–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {last_entities}")
                
                # –ë–µ—Ä–µ–º –í–°–ï –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                if last_entities.get("location_info"):
                    final_entities["location_info"] = last_entities["location_info"].copy()
                    logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ location_info: {final_entities['location_info']}")
                else:
                    logger.warning("–í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç location_info!")
                    
                if last_entities.get("geo_type"):
                    final_entities["geo_type"] = last_entities["geo_type"].copy()
                    logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ geo_type: {final_entities['geo_type']}")
                else:
                    logger.warning("–í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç geo_type!")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –Ω–æ–≤—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if "object" in final_entities and not final_entities.get("geo_type"):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é
                object_name = final_entities.pop("object")
                final_entities.setdefault("location_info", {"exact_location": None, "region": None, "nearby_places": []})
                final_entities.setdefault("geo_type", {"primary_type": ["–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"], "specific_types": []})
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º specific_types –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if "–∑–∞–∫–∞–∑–Ω–∏–∫" in query_lower:
                final_entities["geo_type"]["specific_types"] = ["–ó–∞–∫–∞–∑–Ω–∏–∫–∏"]
            elif "–º—É–∑–µ–π" in query_lower:
                final_entities["geo_type"]["specific_types"] = ["–ú—É–∑–µ–∏"]
            elif "–ø–∞–º—è—Ç–Ω–∏–∫" in query_lower:
                final_entities["geo_type"]["specific_types"] = ["–ü–∞–º—è—Ç–Ω–∏–∫–∏"]
            elif "–∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫" in query_lower:
                final_entities["geo_type"]["specific_types"] = ["–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∏"]
            
            # üîÑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï: –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±—ã–ª–∞ –ª–æ–∫–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
            if last_was_geo and last_entities.get("location_info"):
                if not final_entities.get("location_info"):
                    final_entities["location_info"] = {}
                
                # –û–±–æ–≥–∞—â–∞–µ–º exact_location
                if not final_entities["location_info"].get("exact_location") and last_entities["location_info"].get("exact_location"):
                    final_entities["location_info"]["exact_location"] = last_entities["location_info"]["exact_location"]
                    logger.info(f"–û–±–æ–≥–∞—Ç–∏–ª–∏ exact_location: {final_entities['location_info']['exact_location']}")
                
                # –û–±–æ–≥–∞—â–∞–µ–º region  
                if not final_entities["location_info"].get("region") and last_entities["location_info"].get("region"):
                    final_entities["location_info"]["region"] = last_entities["location_info"]["region"]
                    logger.info(f"–û–±–æ–≥–∞—Ç–∏–ª–∏ region: {final_entities['location_info']['region']}")
        
        # üîÑ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        elif is_ambiguous_query and last_intent:
            logger.info(f"–ù–µ—è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ó–∞–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–Ω—Ç '{final_intent}' –Ω–∞ –∏–Ω—Ç–µ–Ω—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: '{last_intent}'")
            final_intent = last_intent
            
        elif final_intent == "unknown" and last_intent:
            final_intent = last_intent
            
        # üîÑ –û–ë–û–ì–ê–©–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö)
        if final_intent not in ["get_geo_objects", "get_geo_info", "get_geo_count"]:
            if not final_entities.get("object") and last_entities.get("object") and "object" in final_entities:
                final_entities["object"] = last_entities.get("object")

            if not final_entities.get("geo_place") and last_entities.get("geo_place") and "geo_place" in final_entities:
                final_entities["geo_place"] = last_entities.get("geo_place")
            
            if final_entities.get("object") and final_entities.get("object") == last_entities.get("object"):
                base_features = last_entities.get("features", {}).copy()
                new_features = entities.get("features", {})
                base_features.update(new_features)
                final_entities["features"] = base_features

        logger.info(f"–û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: intent={final_intent}, entities={final_entities}")
        return final_intent, final_entities

    async def get_comparison_pair(
        self, user_id: str, current_intent: str, current_entities: Dict[str, Any], current_category: Optional[str]
    ) -> Optional[Dict[str, str]]:
        """
        –¢–æ–ª—å–∫–æ —á–∏—Ç–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ.
        """
        if not self.context_manager.redis_client:
            return None

        user_context = await self.context_manager.get_context(user_id)
        history = user_context.get("history", [])
        last_item = history[0] if history else {}

        current_object = current_entities.get("object")
        last_object = last_item.get("object")
        last_category = last_item.get("category")

        if (current_intent in ["get_text", "get_picture"] and
                current_object and current_category and
                last_object and last_category == current_category and
                last_object != current_object):
            return {"object1": last_object, "object2": current_object}
        
        return None

    async def update_history(
    self, user_id: str, final_intent: str, final_entities: Dict[str, Any], 
    object_category: Optional[str], original_query: str = None  # ‚Üê –î–û–ë–ê–í–ò–¢–¨
):
        if final_entities.get("object") or final_entities.get("geo_place"):
            user_context = await self.context_manager.get_context(user_id)
            history = user_context.get("history", [])
            
            new_history_item = {
                "intent": final_intent,
                "original_query": original_query,  # ‚Üê –°–û–•–†–ê–ù–ò–¢–¨
                "entities": final_entities,
                "object": final_entities.get("object"),
                "category": object_category
            }
            
            updated_history = [new_history_item] + history[:1]
            user_context['history'] = updated_history
            await self.context_manager.set_context(user_id, user_context)
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è user_id={user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_history_item}")

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê: logic/dialogue_manager.py ---