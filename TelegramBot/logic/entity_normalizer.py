import logging

logger = logging.getLogger(__name__)

# --- НАЧАЛО ИЗМЕНЕНИЙ ---

# 1. Определяем канонические названия для ГРУПП
PROTECTED_AREAS = "Природоохранные территории"

# 2. Создаем новый словарь, который "раскрывает" группы в списки
GROUP_ENTITY_MAP = {
    PROTECTED_AREAS: ["Заповедники", "Заказники"],
    # Сюда можно будет добавлять другие группы в будущем
}

# 3. Обновляем основной ENTITY_MAP, чтобы синонимы ссылались на НАЗВАНИЕ ГРУППЫ
ENTITY_MAP = {
    # Синонимы для "всех достопримечательностей", возвращают None
    "достопримечательности": "",
    "интересное место": "",
    "что интересного": "",

    # Синонимы для "Наука"
    "научные учреждения": "Наука",
    "научные центры": "Наука",
    "институты": "Наука",
    "наука": "Наука",
    "солнечная обсерватория": "Наука",

    # Синонимы для "Музеи"
    "музеи": "Музеи",
    "музей": "Музеи",

    # Синонимы для "Памятники"
    "памятники": "Памятники",
    "памятник": "Памятники",

    # Синонимы для "Заповедники" (остаются для точных запросов)
    "заповедники": "Заповедники",
    "заповедник": "Заповедники",
    
    # Синонимы для "Заказники" (остаются для точных запросов)
    "заказники": "Заказники",
    "заказник": "Заказники",

    # Синонимы, которые теперь ссылаются на ГРУППУ
    "заповедные места": PROTECTED_AREAS,
    "природоохранные территории": PROTECTED_AREAS,
}

# --- КОНЕЦ ИЗМЕНЕНИЙ ---

def normalize_entity_name(raw_name: str) -> str | None:
    """
    Приводит имя сущности, извлеченное LLM, к каноническому виду.
    """
    if not isinstance(raw_name, str):
        return None

    raw_name_lower = raw_name.lower()

    if raw_name_lower in ENTITY_MAP:
        normalized_name = ENTITY_MAP[raw_name_lower]
        if normalized_name:
             logger.debug(f"Сущность '{raw_name}' нормализована в '{normalized_name}'")
        return normalized_name
    else:
        logger.warning(f"Для сущности '{raw_name}' не найдено правило нормализации. Используется исходное значение.")
        return raw_name.capitalize()