# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: logic/api_handlers.py ---

import aiohttp
import asyncio
import logging
import base64
import json
from typing import Dict, Any, List

from config import API_URLS, DEFAULT_TIMEOUT, GIGACHAT_TIMEOUT, GIGACHAT_FALLBACK_URL
from utils.settings_manager import get_user_settings
from utils.context_manager import RedisContextManager
from logic.entity_normalizer import normalize_entity_name

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_user_fallback_setting(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ fallback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return get_user_settings(user_id).get("gigachat_fallback", False)

async def call_gigachat_fallback_service(session: aiohttp.ClientSession, question: str) -> str | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É GigaChat —Å–µ—Ä–≤–∏—Å—É."""
    url = GIGACHAT_FALLBACK_URL
    try:
        payload = {"question": question}
        async with session.post(url, json=payload, timeout=GIGACHAT_TIMEOUT) as response:
            if response.ok:
                data = await response.json()
                return data.get("answer")
            else:
                logger.error(f"Fallback-—Å–µ—Ä–≤–∏—Å GigaChat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} {await response.text()}")
                return None
    except Exception as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ fallback-—Å–µ—Ä–≤–∏—Å—É GigaChat: {e}")
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API ---
async def check_simplified_search(session: aiohttp.ClientSession, object_nom: str, features: dict, debug_mode: bool) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    try:
        url = f"{API_URLS['search_images']}?debug_mode={str(debug_mode).lower()}"
        payload = {"species_name": object_nom, "features": features}
        
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {object_nom} —Å features: {features}")
        
        async with session.post(url, json=payload, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                has_images = bool(data.get("images"))
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {object_nom} {features}: {has_images}")
                return has_images
            return False
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {object_nom}: {e}")
        return False

async def handle_get_picture(session: aiohttp.ClientSession, analysis: dict, user_id: str, debug_mode: bool) -> list:
    logger.info(f"--- –ó–∞–ø—É—Å–∫ handle_get_picture —Å analysis: {analysis} ---")
    
    primary_entity = analysis.get("primary_entity", {})
    object_nom = primary_entity.get("name")
    attributes = analysis.get("attributes", {})
    
    if not object_nom:
        return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."}]

    features = {}
    if attributes.get("season"): features["season"] = attributes["season"]
    if attributes.get("habitat"): features["habitat"] = attributes["habitat"]
    if attributes.get("state") == "—Ü–≤–µ—Ç–µ–Ω–∏–µ": features["flowering"] = True

    url = f"{API_URLS['search_images']}?debug_mode={str(debug_mode).lower()}"
    payload = {"species_name": object_nom, "features": features}

    try:
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok or not (await resp.json()).get("images"):
                logger.warning(f"[{user_id}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è '{object_nom}' —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ {features} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ fallback.")
                
                # --- [–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê FALLBACK] ---
                if not attributes: # –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –±—ã–ª–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤, —É–ø—Ä–æ—â–∞—Ç—å –Ω–µ—á–µ–≥–æ
                    return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è ¬´{object_nom}¬ª."}]

                fallback_options = []
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–ø—Ä–æ—â–µ–Ω–∏—è
                if "season" in attributes:
                    test_features = features.copy(); test_features.pop("season")
                    if await check_simplified_search(session, object_nom, test_features, debug_mode):
                        fallback_options.append({"text": "‚ùÑÔ∏è –ë–µ–∑ —Å–µ–∑–æ–Ω–∞", "callback_data": f"fallback:no_season:{object_nom}"})
                
                if "habitat" in attributes:
                    test_features = features.copy(); test_features.pop("habitat")
                    if await check_simplified_search(session, object_nom, test_features, debug_mode):
                        fallback_options.append({"text": "üå≤ –ë–µ–∑ –º–µ—Å—Ç–∞", "callback_data": f"fallback:no_habitat:{object_nom}"})

                # –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "—Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç", –µ—Å–ª–∏ –±—ã–ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∞—Ç—Ä–∏–±—É—Ç—ã
                if await check_simplified_search(session, object_nom, {}, debug_mode):
                    fallback_options.append({"text": "üñºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç", "callback_data": f"fallback:basic:{object_nom}"})
                
                if not fallback_options:
                    return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è ¬´{object_nom}¬ª —Å –ª—é–±—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."}]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ Redis, —á—Ç–æ–±—ã callback –º–æ–≥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                context_manager = RedisContextManager()
                fallback_key = f"fallback_attributes:{user_id}"
                await context_manager.set_context(fallback_key, attributes)
                await context_manager.redis_client.expire(fallback_key, 600) # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∂–∏–≤–µ—Ç 10 –º–∏–Ω—É—Ç
                logger.info(f"[{user_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è fallback: {attributes}")
                
                buttons = [fallback_options[i:i+2] for i in range(0, len(fallback_options), 2)]
                
                return [{"type": "clarification", 
                         "content": f"üñºÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å? –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:",
                         "buttons": buttons}]
                # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò FALLBACK ---

            data = await resp.json()
            images = data.get("images", [])
            messages = [{"type": "image", "content": img["image_path"]} for img in images[:5] if isinstance(img, dict) and "image_path" in img]
            
            if not messages:
                 return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ¬´{object_nom}¬ª."}]
            return messages

    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_get_picture: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."}]
    
async def check_simplified_search(session: aiohttp.ClientSession, object_nom: str, features: dict, debug_mode: bool) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    try:
        url = f"{API_URLS['search_images']}?debug_mode={str(debug_mode).lower()}"
        payload = {"species_name": object_nom, "features": features}
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {object_nom} —Å features: {features}")
        
        async with session.post(url, json=payload, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                has_images = bool(data.get("images"))
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {object_nom} {features}: {has_images}")
                return has_images
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ {object_nom}")
            return False
    except asyncio.TimeoutError:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {object_nom}")
        return False
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {object_nom}: {e}")
        return False

async def handle_picture_fallback(session: aiohttp.ClientSession, result: dict, debug_mode: bool, user_id: str) -> list:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—è –∏—Ö –≤ API
    """
    object_nom = result.get("object")
    original_features = result.get("features", {})
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ fallback –¥–ª—è {object_nom} —Å features: {original_features}")
    
    fallback_options = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–ø—Ä–æ—â–µ–Ω–∏—è
    if original_features.get("season"):
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ–∑ —Å–µ–∑–æ–Ω–∞
        test_features = original_features.copy()
        test_features.pop("season")
        if await check_simplified_search(session, object_nom, test_features, debug_mode):
            fallback_options.append({
                "text": f"‚ùÑÔ∏è –ë–µ–∑ —Å–µ–∑–æ–Ω–∞",
                "callback_data": f"fallback:no_season:{object_nom}",
                "features": test_features
            })
    
    if original_features.get("habitat"):
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ë–µ–∑ –º–µ—Å—Ç–∞ –æ–±–∏—Ç–∞–Ω–∏—è
        test_features = original_features.copy()
        test_features.pop("habitat")
        if await check_simplified_search(session, object_nom, test_features, debug_mode):
            fallback_options.append({
                "text": f"üå≤ –ë–µ–∑ –º–µ—Å—Ç–∞", 
                "callback_data": f"fallback:no_habitat:{object_nom}",
                "features": test_features
            })
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
    if len(original_features) >= 1:
        test_features = {}
        if await check_simplified_search(session, object_nom, test_features, debug_mode):
            fallback_options.append({
                "text": f"üñºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç",
                "callback_data": f"fallback:basic:{object_nom}",
                "features": test_features
            })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É–ø—Ä–æ—â–µ–Ω–∏—è
    if not fallback_options:
        logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö —É–ø—Ä–æ—â–µ–Ω–∏–π –¥–ª—è {object_nom}")
        return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è '{object_nom}' —Å –ª—é–±—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."}]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ features –≤ Redis –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from utils.context_manager import RedisContextManager
    context_manager = RedisContextManager()
    fallback_key = f"fallback_features:{user_id}"
    await context_manager.set_context(fallback_key, original_features)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É
    if context_manager.redis_client:
        await context_manager.redis_client.expire(fallback_key, 600)
    
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ fallback features –¥–ª—è {user_id}: {original_features}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    for i in range(0, len(fallback_options), 2):
        row = fallback_options[i:i+2]
        buttons.append([
            {"text": btn["text"], "callback_data": btn["callback_data"]} 
            for btn in row
        ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    feature_parts = []
    if original_features.get("season"):
        feature_parts.append(f"—Å–µ–∑–æ–Ω ¬´{original_features['season']}¬ª")
    if original_features.get("habitat"):
        feature_parts.append(f"–º–µ—Å—Ç–æ ¬´{original_features['habitat']}¬ª")
    if original_features.get("flowering"):
        feature_parts.append("—Ü–≤–µ—Ç–µ–Ω–∏–µ")

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: "—Å–µ–∑–æ–Ω ¬´–õ–µ—Ç–æ¬ª –∏ –º–µ—Å—Ç–æ ¬´–õ—É–≥¬ª"
    if len(feature_parts) == 1:
        features_text = feature_parts[0]
    elif len(feature_parts) == 2:
        features_text = f"{feature_parts[0]} –∏ {feature_parts[1]}"
    else:
        features_text = ", ".join(feature_parts[:-1]) + f" –∏ {feature_parts[-1]}"

    return [{
        "type": "clarification", 
        "content": f"üñºÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π {object_nom} —Å—Ä–∞–∑—É —Å {features_text}.\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å? –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:",
        "buttons": buttons
    }]

async def handle_get_description(session: aiohttp.ClientSession, analysis: dict, user_id: str, original_query: str, debug_mode: bool) -> list:
    primary_entity = analysis.get("primary_entity", {})
    object_nom = primary_entity.get("name")
    
    # [–ù–û–í–û–ï] –ü–æ–ª—É—á–∞–µ–º offset –∏–∑ analysis. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.
    offset = analysis.get("offset", 0)

    if not object_nom:
        return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è."}]
        
    find_url = f"{API_URLS['find_species_with_description']}"
    payload = {"name": object_nom, "limit": 4, "offset": offset} # –ò—Å–ø–æ–ª—å–∑—É–µ–º offset –≤ –∑–∞–ø—Ä–æ—Å–µ
    logger.debug(f"[{user_id}] –ó–∞–ø—Ä–æ—Å –∫ `find_species_with_description` —Å payload: {payload}")

    try:
        async with session.post(find_url, json=payload, timeout=DEFAULT_TIMEOUT) as find_resp:
            if not find_resp.ok:
                logger.error(f"[{user_id}] API `find_species` –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {find_resp.status} –¥–ª—è '{object_nom}'")
                return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{object_nom}'."}]
            
            data = await find_resp.json()
            status = data.get("status")
            logger.debug(f"[{user_id}] –û—Ç–≤–µ—Ç –æ—Ç `find_species`: status='{status}', matches={data.get('matches')}")

            if status == "ambiguous":
                matches = data.get("matches", [])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                buttons = [[{"text": match, "callback_data": f"clarify_object:{match}"}] for match in matches]
                
                # [–ù–û–í–û–ï] –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                system_buttons_row = []
                # –î–æ–±–∞–≤–ª—è–µ–º "–õ—é–±—É—é", –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                if matches:
                    system_buttons_row.append({"text": "üé≤ –õ—é–±—É—é", "callback_data": f"clarify_object:{matches[0]}"})

                # –î–æ–±–∞–≤–ª—è–µ–º "–ü–æ–∏—Å–∫–∞—Ç—å –µ—â–µ", –µ—Å–ª–∏ API —Å–æ–æ–±—â–∏–ª, —á—Ç–æ –µ—Å—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if data.get("has_more", False):
                    new_offset = offset + len(matches)
                    # –°–æ–∑–¥–∞–µ–º callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    system_buttons_row.append({"text": "üîç –ü–æ–∏—Å–∫–∞—Ç—å –µ—â–µ", "callback_data": f"clarify_more:{object_nom}:{new_offset}"})

                # –ï—Å–ª–∏ –º—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–Ω–æ–ø–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Ä—è–¥ –≤ –æ–±—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                if system_buttons_row:
                    buttons.append(system_buttons_row)
                
                return [{ "type": "clarification", "content": f"–Ø –∑–Ω–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –¥–ª—è ¬´{object_nom}¬ª. –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", "buttons": buttons }]

            elif status == "found":
                # ... (—ç—Ç–∞ —á–∞—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                canonical_name = data.get("matches", [object_nom])[0]
                desc_url = f"{API_URLS['get_description']}?species_name={canonical_name}&debug_mode={str(debug_mode).lower()}"
                logger.debug(f"[{user_id}] –û–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: '{canonical_name}'. –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ URL: {desc_url}")

                async with session.get(desc_url, timeout=DEFAULT_TIMEOUT) as desc_resp:
                    if desc_resp.ok:
                        desc_data = await desc_resp.json()
                        descriptions = desc_data.get("descriptions", [])
                        text = ""
                        
                        if descriptions:
                            first_item = descriptions[0]
                            if isinstance(first_item, dict):
                                text = first_item.get("content", "")
                            elif isinstance(first_item, str):
                                text = first_item
                        
                        if text:
                            logger.info(f"[{user_id}] –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{canonical_name}' —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                            return [{"type": "text", "content": text, "canonical_name": canonical_name}]
            
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            logger.warning(f"[{user_id}] –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{object_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤.")
            if get_user_fallback_setting(user_id):
                logger.info(f"[{user_id}] –ó–∞–ø—É—Å–∫–∞–µ–º GigaChat fallback –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{original_query}'")
                fallback_answer = await call_gigachat_fallback_service(session, original_query)
                if fallback_answer: 
                    return [{"type": "text", "content": f"**–û—Ç–≤–µ—Ç –æ—Ç GigaChat:**\n\n{fallback_answer}", "parse_mode": "Markdown"}]
            
            return [{"type": "text", "content": f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ¬´{object_nom}¬ª."}]

    except Exception as e:
        logger.error(f"[{user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `handle_get_description`: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É –æ–ø–∏—Å–∞–Ω–∏–π."}]
    
async def handle_comparison(session: aiohttp.ClientSession, analysis: dict, debug_mode: bool) -> list:
    # TODO: –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–®–∞–≥ 4)
    # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    object1 = analysis.get("primary_entity", {}).get("name")
    object2 = analysis.get("secondary_entity", {}).get("name")
    if not object1 or not object2:
        return [{"type": "text", "content": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."}]
    return [{"type": "text", "content": f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É {object1} –∏ {object2} –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."}]

async def _get_map_from_api(session: aiohttp.ClientSession, url: str, payload: dict, object_name: str, debug_mode: bool, geo_name: str = None) -> list:
    # –≠—Ç–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async with session.post(f"{url}?debug_mode={str(debug_mode).lower()}", json=payload, timeout=DEFAULT_TIMEOUT) as map_resp:
        map_data = await map_resp.json()
        if not map_resp.ok: return [{"type": "text", "content": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É."}]

        names = sorted(list(set(name.capitalize() for name in map_data.get("names", []))))
        caption = ""
        if names:
            text_header = f"üìç –†—è–¥–æ–º —Å '{geo_name}' –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å '{object_name}' –≤ –º–µ—Å—Ç–∞—Ö:\n" if geo_name else f"üìç '{object_name.capitalize()}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–∞—Ö:\n"
            caption = text_header + "‚Ä¢ " + "\n‚Ä¢ ".join(names)

        messages = []
        if map_data.get("status") == "no_objects":
            text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª '{object_name}'" + (f" –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç '{geo_name}'." if geo_name else " –Ω–∞ –∫–∞—Ä—Ç–µ.")
            messages.append({"type": "text", "content": text})

        if map_data.get("interactive_map") and map_data.get("static_map"):
            messages.append({"type": "map", "static": map_data["static_map"], "interactive": map_data["interactive_map"], "caption": caption})
        elif caption:
            messages.append({"type": "text", "content": caption})
        return messages
    
async def handle_nearest(session: aiohttp.ClientSession, analysis: dict, debug_mode: bool) -> list:
    # [–ù–û–í–û–ï] –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ `analysis`
    object_nom = analysis.get("primary_entity", {}).get("name")
    geo_nom = analysis.get("secondary_entity", {}).get("name")
    if not object_nom or not geo_nom:
        return [{"type": "text", "content": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞: –Ω—É–∂–µ–Ω –∏ –æ–±—ä–µ–∫—Ç, –∏ –º–µ—Å—Ç–æ."}]

    try:
        async with session.post(API_URLS["get_coords"], json={"name": geo_nom}, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok: return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{geo_nom}'."}]
            coords = await resp.json()

        payload = {"latitude": coords.get("latitude"), "longitude": coords.get("longitude"), "radius_km": 35, "species_name": object_nom, "object_type": "geographical_entity"}
        return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom, debug_mode, geo_nom)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_nearest: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç."}]

async def handle_draw_locate_map(session: aiohttp.ClientSession, analysis: dict, debug_mode: bool) -> list:
    # [–ù–û–í–û–ï] –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ `analysis`
    object_nom = analysis.get("primary_entity", {}).get("name")
    if not object_nom: return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ."}]
    
    payload = {"latitude": 53.27612, "longitude": 107.3274, "radius_km": 500000, "species_name": object_nom, "object_type": "geographical_entity"}
    return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom, debug_mode)

async def handle_objects_in_polygon(session: aiohttp.ClientSession, analysis: dict, debug_mode: bool) -> list:
    geo_nom = analysis.get("secondary_entity", {}).get("name")
    if not geo_nom:
        logger.error("–û—à–∏–±–∫–∞ –≤ handle_objects_in_polygon: –Ω–µ –Ω–∞–π–¥–µ–Ω `secondary_entity` –≤ –∞–Ω–∞–ª–∏–∑–µ.")
        return [{"type": "text", "content": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤."}]
    
    url = f"{API_URLS['objects_in_polygon']}?debug_mode={str(debug_mode).lower()}"
    payload = {"name": geo_nom, "buffer_radius_km": 5}
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ `objects_in_polygon` —Å payload: {payload}")
    
    try:
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok:
                logger.error(f"API `objects_in_polygon` –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {resp.status} –¥–ª—è '{geo_nom}'")
                return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è '{geo_nom}'."}]
            
            data = await resp.json()
            objects_list = data.get("all_biological_names", [])

            # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            if objects_list:
                caption = f"üó∫Ô∏è **–í —Ä–∞–π–æ–Ω–µ ¬´{geo_nom}¬ª —è –Ω–∞—à–µ–ª {len(objects_list)} –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.**\n\n–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫—Ä–∞—Ç–∫–∏–π —É–º–Ω—ã–π –æ–±–∑–æ—Ä –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫?"
            else:
                caption = f"–í —Ä–∞–π–æ–Ω–µ ¬´{geo_nom}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–Ω–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤."

            # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            buttons = []
            if len(objects_list) > 0:
                buttons.append([
                    {"text": "üéØ –£–º–Ω—ã–π –æ–±–∑–æ—Ä", "callback_data": f"explore:overview:{geo_nom}"},
                    {"text": "üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫", "callback_data": f"explore:full_list:{geo_nom}"}
                ])
            
            # [–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï] –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            interactive_map_url = data.get("interactive_map")
            if interactive_map_url:
                buttons.append([
                    {"text": "üåç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ", "url": interactive_map_url}
                ])

            # 3. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if data.get("static_map"):
                logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è '{geo_nom}'. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.")
                return [{
                    "type": "clarification_map",
                    "static_map": data["static_map"],
                    "content": caption,
                    "buttons": buttons
                }]
            else:
                logger.debug(f"–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è '{geo_nom}'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.")
                return [{
                    "type": "clarification",
                    "content": caption,
                    "buttons": buttons
                }]

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `handle_objects_in_polygon`: {e}", exc_info=True)
        return [{"type": "text", "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ ¬´{geo_nom}¬ª."}]
    
async def handle_geo_request(session: aiohttp.ClientSession, analysis: dict, user_id: str, original_query: str, debug_mode: bool) -> list:
    primary_entity = analysis.get("primary_entity", {})
    secondary_entity = analysis.get("secondary_entity", {})
    
    location_name = secondary_entity.get("name")
    # –ï—Å–ª–∏ –≤ secondary_entity –Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å "–ø–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∏"),
    # —Ç–æ –ª–æ–∫–∞—Ü–∏–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å primary_entity, –µ—Å–ª–∏ —ç—Ç–æ GeoPlace.
    if not location_name and primary_entity.get("type") == "GeoPlace":
        location_name = primary_entity.get("name")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
    raw_entity_name = primary_entity.get("name")
    canonical_entity_name = normalize_entity_name(raw_entity_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º geo_type –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    if canonical_entity_name is None:
        # –≠—Ç–æ —Å–ª—É—á–∞–π "–≤—Å–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        geo_type_payload = {"primary_type": [""], "specific_types": [""]}
    else:
        # –≠—Ç–æ —Å–ª—É—á–∞–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–æ–º (–ú—É–∑–µ–∏, –ù–∞—É–∫–∞ –∏ —Ç.–¥.)
        geo_type_payload = {"primary_type": ["–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"], "specific_types": [canonical_entity_name]}
        
    payload = {
        "location_info": { "exact_location": location_name, "region": "", "nearby_places": [] },
        "geo_type": geo_type_payload
    }
    
    url = f"{API_URLS['find_geo_special_description']}?query={original_query}&use_gigachat_answer=true&debug_mode={str(debug_mode).lower()}"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ `find_geo_special_description` —Å payload: {payload}")
    
    try:
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok:
                logger.error(f"API `find_geo_special_description` –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {resp.status}. Payload: {payload}")
                return [{"type": "text", "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."}]
            
            data = await resp.json()
            answer = data.get("gigachat_answer") or data.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
            return [{"type": "text", "content": answer}]
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `handle_geo_request`: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."}]
    
async def _update_geo_context(user_id: str, result: dict, original_query: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from logic.dialogue_manager import DialogueManager
        from utils.context_manager import RedisContextManager
        
        context_manager = RedisContextManager()
        dialogue_manager = DialogueManager(context_manager)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–∞ (–¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö - –≤—Å–µ–≥–¥–∞ None)
        object_category = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        await dialogue_manager.update_history(
            user_id=user_id,
            final_intent="get_geo_objects",  # –∏–ª–∏ –¥—Ä—É–≥–æ–π geo intent
            final_entities=result,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å—É—â–Ω–æ—Å—Ç–∏
            object_category=object_category,
            original_query=original_query  # ‚Üê –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ –ø–æ–ª–µ
        )
        
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id: {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            
    except asyncio.TimeoutError:
        logger.error("API CALL TIMEOUT: –ó–∞–ø—Ä–æ—Å –∫ /object/description/ –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç.")
        return [{"type": "text", "content": "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_geo_request: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."}]

async def _process_geo_api_response(data: dict, original_query: str) -> list:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
    gigachat_answer = data.get("gigachat_answer")
    error = data.get("error")
    
    if error:
        return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {error}"}]
    
    if gigachat_answer:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
        return [{"type": "text", "content": gigachat_answer}]
    else:
        # Fallback - –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç
        return [{"type": "text", "content": f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{original_query}' –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."}]
    
async def create_llm_overview(geo_place: str, objects_list: list) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–≤–∏–¥–µ—Ç—å —É–º–Ω—ã–π –æ–±–∑–æ—Ä (–ë–ï–ó –≤—ã–∑–æ–≤–∞ LLM –∑–¥–µ—Å—å)
    """
    buttons = [
        [{"text": "üéØ –£–º–Ω—ã–π –æ–±–∑–æ—Ä", "callback_data": f"explore:overview:{geo_place}"}],
        [{"text": "üìã –í—Å–µ –æ–±—ä–µ–∫—Ç—ã", "callback_data": f"explore:full_list:{geo_place}"}]
    ]
    
    return {
        "type": "clarification",
        "content": f"üó∫Ô∏è **{geo_place}**\n\n–ù–∞—à–µ–ª {len(objects_list)} –æ–±—ä–µ–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —É–º–Ω—ã–π –æ–±–∑–æ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫?",
        "buttons": buttons
    }

# --- –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä ---

async def handle_intent(session: aiohttp.ClientSession, intent: str, result: dict, user_id: str, original_query: str, debug_mode: bool) -> list:
    handler_kwargs: Dict[str, Any] = {"session": session, "result": result, "debug_mode": debug_mode}
    
    if intent in ["get_geo_objects", "get_geo_info", "get_geo_count"]:
        handler_kwargs.update({
            "user_id": user_id,
            "original_query": original_query
        })

    elif intent == "get_text":
        handler_kwargs.update({"user_id": user_id, "original_query": original_query})
        if "offset" in result:
            handler_kwargs["offset"] = result["offset"]

    handlers = {
        "get_picture": handle_get_picture,
        "get_text": handle_get_description,
        "get_intersection_object_on_map": handle_nearest,
        "get_location": handle_draw_locate_map,
        "get_objects_in_polygon": handle_objects_in_polygon,
        "get_comparison": handle_comparison,

        "get_geo_objects": handle_geo_request,
        "get_geo_info": handle_geo_request,
        "get_geo_count": handle_geo_request
    }

    handler_func = handlers.get(intent)
    if handler_func:
        import inspect
        sig = inspect.signature(handler_func)
        filtered_kwargs = {k: v for k, v in handler_kwargs.items() if k in sig.parameters}
        
        return await handler_func(**filtered_kwargs)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π intent: {intent}")
        return [{"type": "text", "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å."}]
        
# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê: logic/api_handlers.py ---