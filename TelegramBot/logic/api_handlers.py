# --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê: logic/api_handlers.py ---

import aiohttp
import asyncio
import logging
import base64
import json
from typing import Dict, Any, List

from config import API_URLS, DEFAULT_TIMEOUT, GIGACHAT_TIMEOUT, GIGACHAT_FALLBACK_URL
from utils.settings_manager import get_user_settings

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_user_fallback_setting(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ fallback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return get_user_settings(user_id).get("gigachat_fallback", False)

async def call_gigachat_fallback_service(session: aiohttp.ClientSession, question: str) -> str | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É GigaChat —Å–µ—Ä–≤–∏—Å—É."""
    url = GIGACHAT_FALLBACK_URL
    try:
        payload = {"question": question}
        async with session.post(url, json=payload, timeout=GIGACHAT_TIMEOUT) as response:
            if response.ok:
                data = await response.json()
                return data.get("answer")
            else:
                logger.error(f"Fallback-—Å–µ—Ä–≤–∏—Å GigaChat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} {await response.text()}")
                return None
    except Exception as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ fallback-—Å–µ—Ä–≤–∏—Å—É GigaChat: {e}")
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API ---

async def handle_get_picture(session: aiohttp.ClientSession, result: dict, debug_mode: bool) -> list:
    logger.info(f"--- –ó–∞–ø—É—Å–∫ handle_get_picture —Å result: {result} ---")
    messages = []
    object_nom = result.get("object")
    features = result.get("features", {})
    
    url = f"{API_URLS['search_images']}?debug_mode={str(debug_mode).lower()}"
    payload = {"species_name": object_nom, "features": features}

    try:
        logger.info(f"API CALL: handle_get_picture. URL: {url}, Payload: {json.dumps(payload, ensure_ascii=False)}")
        async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
            logger.info(f"API RESPONSE: handle_get_picture. Status: {resp.status}")
            raw_text = await resp.text()
            try:
                data = json.loads(raw_text)
                logger.info(f"API RESPONSE DATA (JSON): {data}")
            except json.JSONDecodeError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}")
                logger.error(f"RAW RESPONSE TEXT: {raw_text}")
                return [{"type": "text", "content": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (status {resp.status})."}]

            # === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ fallback ===
            if not resp.ok or data.get("status") == "not_found" or not data.get("images"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                if len(features) >= 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–∏–µ
                    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ result (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ gigachat_handler)
                    user_id = result.get("user_id", "unknown")
                    return await handle_picture_fallback(session, result, debug_mode, user_id)
                else:
                    return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è '{object_nom}'."}]

            images = data.get("images", [])
            sent_images_count = 0
            for img in images[:5]:
                if isinstance(img, dict) and "image_path" in img:
                    image_url = img["image_path"]
                    try:
                        async with session.head(image_url, timeout=5, allow_redirects=True) as check_resp:
                            if check_resp.status == 200:
                                messages.append({"type": "image", "content": image_url})
                                sent_images_count += 1
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
            
            if sent_images_count == 0:
                 messages.append({"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è '{object_nom}'."})

    except asyncio.TimeoutError:
        logger.error("API CALL TIMEOUT: –ó–∞–ø—Ä–æ—Å –∫ /search_images_by_features –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç.")
        return [{"type": "text", "content": "–°–µ—Ä–≤–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_get_picture: {e}", exc_info=True)
        messages.append({"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."})

    logger.info(f"--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ handle_get_picture. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π. ---")
    return messages

async def check_simplified_search(session: aiohttp.ClientSession, object_nom: str, features: dict, debug_mode: bool) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    try:
        url = f"{API_URLS['search_images']}?debug_mode={str(debug_mode).lower()}"
        payload = {"species_name": object_nom, "features": features}
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {object_nom} —Å features: {features}")
        
        async with session.post(url, json=payload, timeout=10) as resp:
            if resp.status == 200:
                data = await resp.json()
                has_images = bool(data.get("images"))
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {object_nom} {features}: {has_images}")
                return has_images
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ {object_nom}")
            return False
    except asyncio.TimeoutError:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {object_nom}")
        return False
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {object_nom}: {e}")
        return False

async def handle_picture_fallback(session: aiohttp.ClientSession, result: dict, debug_mode: bool, user_id: str) -> list:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—è –∏—Ö –≤ API
    """
    object_nom = result.get("object")
    original_features = result.get("features", {})
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ fallback –¥–ª—è {object_nom} —Å features: {original_features}")
    
    fallback_options = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–ø—Ä–æ—â–µ–Ω–∏—è
    if original_features.get("season"):
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ë–µ–∑ —Å–µ–∑–æ–Ω–∞
        test_features = original_features.copy()
        test_features.pop("season")
        if await check_simplified_search(session, object_nom, test_features, debug_mode):
            fallback_options.append({
                "text": f"‚ùÑÔ∏è –ë–µ–∑ —Å–µ–∑–æ–Ω–∞",
                "callback_data": f"fallback:no_season:{object_nom}",
                "features": test_features
            })
    
    if original_features.get("habitat"):
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ë–µ–∑ –º–µ—Å—Ç–∞ –æ–±–∏—Ç–∞–Ω–∏—è
        test_features = original_features.copy()
        test_features.pop("habitat")
        if await check_simplified_search(session, object_nom, test_features, debug_mode):
            fallback_options.append({
                "text": f"üå≤ –ë–µ–∑ –º–µ—Å—Ç–∞", 
                "callback_data": f"fallback:no_habitat:{object_nom}",
                "features": test_features
            })
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
    if len(original_features) >= 1:
        test_features = {}
        if await check_simplified_search(session, object_nom, test_features, debug_mode):
            fallback_options.append({
                "text": f"üñºÔ∏è –¢–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç",
                "callback_data": f"fallback:basic:{object_nom}",
                "features": test_features
            })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É–ø—Ä–æ—â–µ–Ω–∏—è
    if not fallback_options:
        logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö —É–ø—Ä–æ—â–µ–Ω–∏–π –¥–ª—è {object_nom}")
        return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è '{object_nom}' —Å –ª—é–±—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."}]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ features –≤ Redis –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from utils.context_manager import RedisContextManager
    context_manager = RedisContextManager()
    fallback_key = f"fallback_features:{user_id}"
    await context_manager.set_context(fallback_key, original_features)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É
    if context_manager.redis_client:
        await context_manager.redis_client.expire(fallback_key, 600)
    
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ fallback features –¥–ª—è {user_id}: {original_features}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    for i in range(0, len(fallback_options), 2):
        row = fallback_options[i:i+2]
        buttons.append([
            {"text": btn["text"], "callback_data": btn["callback_data"]} 
            for btn in row
        ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    feature_parts = []
    if original_features.get("season"):
        feature_parts.append(f"—Å–µ–∑–æ–Ω ¬´{original_features['season']}¬ª")
    if original_features.get("habitat"):
        feature_parts.append(f"–º–µ—Å—Ç–æ ¬´{original_features['habitat']}¬ª")
    if original_features.get("flowering"):
        feature_parts.append("—Ü–≤–µ—Ç–µ–Ω–∏–µ")

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: "—Å–µ–∑–æ–Ω ¬´–õ–µ—Ç–æ¬ª –∏ –º–µ—Å—Ç–æ ¬´–õ—É–≥¬ª"
    if len(feature_parts) == 1:
        features_text = feature_parts[0]
    elif len(feature_parts) == 2:
        features_text = f"{feature_parts[0]} –∏ {feature_parts[1]}"
    else:
        features_text = ", ".join(feature_parts[:-1]) + f" –∏ {feature_parts[-1]}"

    return [{
        "type": "clarification", 
        "content": f"üñºÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π {object_nom} —Å—Ä–∞–∑—É —Å {features_text}.\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å? –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:",
        "buttons": buttons
    }]

async def handle_get_description(session: aiohttp.ClientSession, result: dict, user_id: str, original_query: str, debug_mode: bool, offset: int = 0) -> list:
    object_nom = result.get("object")
    
    find_url = f"{API_URLS['find_species_with_description']}"
    payload = {"name": object_nom, "limit": 4, "offset": offset}

    try:
        async with session.post(find_url, json=payload, timeout=DEFAULT_TIMEOUT) as find_resp:
            if not find_resp.ok:
                return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{object_nom}'."}]
            
            data = await find_resp.json()
            status = data.get("status")

            if status == "ambiguous":
                matches = data.get("matches", [])
                buttons = [[{"text": match, "callback_data": f"clarify_object:{match}"}] for match in matches]
                system_buttons_row = []
                if matches:
                    system_buttons_row.append({"text": "–õ—é–±—É—é üé≤", "callback_data": f"clarify_object:{matches[0]}"})

                has_more = data.get("has_more", False)
                if has_more:
                    new_offset = offset + len(matches)
                    callback_str = f"clarify_more:{object_nom}:{new_offset}"
                    system_buttons_row.append({"text": "–ü–æ–∏—Å–∫–∞—Ç—å –µ—â–µ üîç", "callback_data": callback_str})

                if system_buttons_row:
                    buttons.append(system_buttons_row)

                return [{
                    "type": "clarification",
                    "content": f"–Ø –∑–Ω–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –¥–ª—è '{object_nom}'. –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "buttons": buttons
                }]

            elif status == "found":
                canonical_name = data.get("matches", [object_nom])[0]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{canonical_name}'. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ...")

                desc_url = f"{API_URLS['get_description']}?species_name={canonical_name}&debug_mode={str(debug_mode).lower()}"
                async with session.get(desc_url, timeout=DEFAULT_TIMEOUT) as desc_resp:
                    if not desc_resp.ok:
                         return [{"type": "text", "content": f"–ù–∞—à–µ–ª –æ–±—ä–µ–∫—Ç '{canonical_name}', –Ω–æ –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ."}]
                    
                    desc_data = await desc_resp.json()
                    descriptions = desc_data.get("descriptions", [])
                    text = ""
                    if descriptions:
                        first_item = descriptions[0]
                        if isinstance(first_item, dict): text = first_item.get("content", "")
                        elif isinstance(first_item, str): text = first_item
                    
                    if text:
                        return [{"type": "text", "content": text, "canonical_name": canonical_name}]
            
            logger.warning(f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{object_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤.")
            if get_user_fallback_setting(user_id):
                fallback_answer = await call_gigachat_fallback_service(session, original_query)
                if fallback_answer: return [{"type": "text", "content": f"**–û—Ç–≤–µ—Ç –æ—Ç GigaChat:**\n\n{fallback_answer}", "parse_mode": "Markdown"}]
            
            return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{object_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_get_description: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É –æ–ø–∏—Å–∞–Ω–∏–π."}]

async def handle_comparison(session: aiohttp.ClientSession, result: dict, debug_mode: bool) -> list:
    object1 = result.get("object1")
    object2 = result.get("object2")
    if not object1 or not object2:
        return [{"type": "text", "content": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."}]

    prompt = f"–°—Ä–∞–≤–Ω–∏ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞: '{object1}' –∏ '{object2}'. –û—Ç–≤–µ—Ç –¥–∞–π –°–¢–†–û–ì–û –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å –±—É–ª–ª–∏—Ç–∞–º–∏ (‚Ä¢). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è. –ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
    comparison_text = await call_gigachat_fallback_service(session, prompt)

    if comparison_text:
        full_answer = f"–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –º–µ–∂–¥—É **{object1}** –∏ **{object2}**:\n\n{comparison_text}"
        return [{"type": "text", "content": full_answer, "parse_mode": "Markdown"}]
    else:
        return [{"type": "text", "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ."}]

async def _get_map_from_api(session: aiohttp.ClientSession, url: str, payload: dict, object_name: str, debug_mode: bool, geo_name: str = None) -> list:
    messages = []
    full_url = f"{url}?debug_mode={str(debug_mode).lower()}"
    
    async with session.post(full_url, json=payload, timeout=DEFAULT_TIMEOUT) as map_resp:
        map_data = await map_resp.json()

        if not map_resp.ok:
            return [{"type": "text", "content": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É."}]

        names = map_data.get("names", [])
        unique_names = sorted(list(set(name.capitalize() for name in names)))
        
        caption_text = ""
        if unique_names:
            text = (f"üìç –†—è–¥–æ–º —Å '{geo_name}' –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å '{object_name}' –≤ –º–µ—Å—Ç–∞—Ö:\n" if geo_name 
                    else f"üìç '{object_name.capitalize()}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–∞—Ö:\n")
            caption_text = text + "‚Ä¢ " + "\n‚Ä¢ ".join(unique_names)
        
        if map_data.get("status") == "no_objects":
            text = (f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª '{object_name}' –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç '{geo_name}'." if geo_name
                    else f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∞—Ä–µ–∞–ª –æ–±–∏—Ç–∞–Ω–∏—è –¥–ª—è '{object_name}'.")
            messages.append({"type": "text", "content": text})
            
        if map_data.get("interactive_map") and map_data.get("static_map"):
            messages.append({"type": "map", "static": map_data["static_map"], "interactive": map_data["interactive_map"], "caption": caption_text or f"–ö–∞—Ä—Ç–∞ –¥–ª—è: {object_name}"})
        elif caption_text:
            messages.append({"type": "text", "content": caption_text})

        return messages

async def handle_nearest(session: aiohttp.ClientSession, result: dict, debug_mode: bool) -> list:
    object_nom = result.get("object")
    geo_nom = result.get("geo_place")
    try:
        coords_url = API_URLS["get_coords"]
        async with session.post(coords_url, json={"name": geo_nom}, timeout=DEFAULT_TIMEOUT) as resp:
            if not resp.ok or (await resp.json()).get("status") == "not_found":
                return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{geo_nom}'."}]
            coords = await resp.json()

        payload = {"latitude": coords.get("latitude"), "longitude": coords.get("longitude"), "radius_km": 35, "species_name": object_nom, "object_type": "geographical_entity"}
        return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom, debug_mode, geo_nom)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_nearest: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç."}]

async def handle_draw_locate_map(session: aiohttp.ClientSession, result: dict, debug_mode: bool) -> list:
    object_nom = result.get("object")
    payload = {"latitude": 53.27612, "longitude": 107.3274, "radius_km": 500000, "species_name": object_nom, "object_type": "geographical_entity"}
    try:
        return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom, debug_mode)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_draw_locate_map: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∞—Ä–µ–∞–ª–∞."}]

async def handle_objects_in_polygon(session: aiohttp.ClientSession, result: dict, debug_mode: bool) -> list:
    geo_nom = result.get("geo_place")
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∫ API
    url = f"{API_URLS['objects_in_polygon']}?debug_mode={str(debug_mode).lower()}"
    payload = {"name": geo_nom, "buffer_radius_km": 5}
    
    async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
        if not resp.ok:
            return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è '{geo_nom}'."}]
        
        data = await resp.json()
        objects_list = data.get("all_biological_names", [])
        
        messages = []
        
        # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É (–∫–∞–∫ —Å–µ–π—á–∞—Å)
        if data.get("interactive_map") and data.get("static_map"):
            caption = f"üìç –û–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–π–æ–Ω–µ: {geo_nom}"
            if objects_list:
                caption += f"\n\n–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects_list)}"
            
            messages.append({
                "type": "map", 
                "static": data["static_map"], 
                "interactive": data["interactive_map"], 
                "caption": caption
            })
        
        # 2. –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –£–ú–ù–´–ô –æ–±–∑–æ—Ä —á–µ—Ä–µ–∑ LLM
        if len(objects_list) > 3:
            # –ù–û–í–û–ï: –≤–º–µ—Å—Ç–æ create_exploration_offer —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–º–Ω—ã–π –æ–±–∑–æ—Ä
            overview_msg = await create_llm_overview(geo_nom, objects_list)
            messages.append(overview_msg)
        # 3. –ï—Å–ª–∏ –º–∞–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        elif objects_list:
            simple_list = f"üåø –í —Ä–∞–π–æ–Ω–µ **{geo_nom}** –Ω–∞–π–¥–µ–Ω—ã:\n‚Ä¢ " + "\n‚Ä¢ ".join(objects_list)
            messages.append({"type": "text", "content": simple_list})
        else:
            messages.append({"type": "text", "content": f"–í —Ä–∞–π–æ–Ω–µ '{geo_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤."})
        
        return messages

async def create_llm_overview(geo_place: str, objects_list: list) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–≤–∏–¥–µ—Ç—å —É–º–Ω—ã–π –æ–±–∑–æ—Ä (–ë–ï–ó –≤—ã–∑–æ–≤–∞ LLM –∑–¥–µ—Å—å)
    """
    buttons = [
        [{"text": "üéØ –£–º–Ω—ã–π –æ–±–∑–æ—Ä", "callback_data": f"explore:overview:{geo_place}"}],
        [{"text": "üìã –í—Å–µ –æ–±—ä–µ–∫—Ç—ã", "callback_data": f"explore:full_list:{geo_place}"}]
    ]
    
    return {
        "type": "clarification",
        "content": f"üó∫Ô∏è **{geo_place}**\n\n–ù–∞—à–µ–ª {len(objects_list)} –æ–±—ä–µ–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —É–º–Ω—ã–π –æ–±–∑–æ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫?",
        "buttons": buttons
    }

# --- –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä ---

async def handle_intent(session: aiohttp.ClientSession, intent: str, result: dict, user_id: str, original_query: str, debug_mode: bool) -> list:
    handler_kwargs: Dict[str, Any] = {"session": session, "result": result, "debug_mode": debug_mode}
    
    if intent == "get_text":
        handler_kwargs.update({"user_id": user_id, "original_query": original_query})
        if "offset" in result:
            handler_kwargs["offset"] = result["offset"]

    handlers = {
        "get_picture": handle_get_picture,
        "get_text": handle_get_description,
        "get_intersection_object_on_map": handle_nearest,
        "get_location": handle_draw_locate_map,
        "get_objects_in_polygon": handle_objects_in_polygon,
        "get_comparison": handle_comparison
    }

    handler_func = handlers.get(intent)
    if handler_func:
        import inspect
        sig = inspect.signature(handler_func)
        filtered_kwargs = {k: v for k, v in handler_kwargs.items() if k in sig.parameters}
        
        return await handler_func(**filtered_kwargs)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π intent: {intent}")
        return [{"type": "text", "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å."}]
        
# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê: logic/api_handlers.py ---