# Файл: TelegramBot/logic/entity_normalizer.py
import logging

logger = logging.getLogger(__name__)

ENTITY_MAP = {
    # Синонимы для "всех достопримечательностей", возвращают None
    "достопримечательности": "Достопримечательности",
    "интересное место": "Достопримечательности",
    "что интересного": "Достопримечательности",

    # Синонимы для "Наука"
    "научные учреждения": "Наука",
    "научные центры": "Наука",
    "институты": "Наука",
    "наука": "Наука",
    "солнечная обсерватория": "Наука",

    # Синонимы для "Музеи"
    "музеи": "Музеи",
    "музей": "Музеи",

    # Синонимы для "Памятники"
    "памятники": "Памятники",
    "памятник": "Памятники",

    # Синонимы для "Заповедники"
    "заповедники": "Заповедники",
    "заповедник": "Заповедники",
    "заповедные места": "Заповедники",
    "природоохранные территории": ["Заповедники", "Заказники"],

    # Синонимы для "Заказники"
    "заказники": "Заказники",
    "заказник": "Заказники",

    

}

def normalize_entity_name_for_maps(raw_name: str) -> str | None: # [ИЗМЕНЕНО] Теперь может возвращать None
    """
    Приводит имя сущности, извлеченное LLM, к каноническому виду,
    который ожидает API бэкенда.
    """
    if not isinstance(raw_name, str):
        return None # Безопасное значение по умолчанию

    raw_name_lower = raw_name.lower()

    if raw_name_lower in ENTITY_MAP:
        normalized_name = ENTITY_MAP[raw_name_lower]
        if normalized_name is None:
            logger.debug(f"Сущность '{raw_name}' распознана как запрос всех достопримечательностей.")
        else:
            logger.debug(f"Сущность '{raw_name}' нормализована в '{normalized_name}'")
        return normalized_name
    else:
        logger.warning(f"Для сущности '{raw_name}' не найдено правило нормализации. Используется исходное значение.")
        return raw_name.capitalize()