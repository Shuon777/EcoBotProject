import aiohttp
import logging
import json
from config import API_URLS, DEFAULT_TIMEOUT, GIGACHAT_TIMEOUT, GIGACHAT_FALLBACK_URL
from settings_manager import get_user_settings

logger = logging.getLogger(__name__)

def get_user_fallback_setting(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ fallback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return get_user_settings(user_id).get("gigachat_fallback", False)

async def call_gigachat_fallback_service(question: str) -> str | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É GigaChat —Å–µ—Ä–≤–∏—Å—É."""
    url = GIGACHAT_FALLBACK_URL
    logger.debug(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ GigaChat Fallback API: {url}")
    try:
        payload = {"question": question}
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, timeout=GIGACHAT_TIMEOUT) as response:
                if response.ok:
                    logger.info("Fallback-—Å–µ—Ä–≤–∏—Å GigaChat –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ.")
                    data = await response.json()
                    return data.get("answer")
                else:
                    logger.error(f"Fallback-—Å–µ—Ä–≤–∏—Å GigaChat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} {await response.text()}")
                    return None
    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ fallback-—Å–µ—Ä–≤–∏—Å—É GigaChat: {e}")
        return None

async def handle_get_picture(result: dict) -> list:
    messages = []
    object_nom = result.get("object")
    features = result.get("features", {})
    url = API_URLS["search_images"]

    try:
        payload = {"species_name": object_nom}
        if features:
            payload["features"] = features
        
        async with aiohttp.ClientSession() as session:
            logger.debug(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API: {url} —Å —Ç–µ–ª–æ–º: {payload}")
            async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
                if not resp.ok:
                    logger.warning(f"API {url} –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É {resp.status} –¥–ª—è '{object_nom}'")
                    return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è '{object_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}]
                
                data = await resp.json()
                if data.get("status") == "not_found" or not data.get("images"):
                    return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '{object_nom}'."}]

                images = data.get("images", [])
                sent_images_count = 0
                for img in images[:5]:
                    if isinstance(img, dict) and "image_path" in img:
                        image_url = img["image_path"]
                        try:
                            async with session.head(image_url, timeout=5, allow_redirects=True) as check_resp:
                                if check_resp.status == 200:
                                    messages.append({"type": "image", "content": image_url})
                                    sent_images_count += 1
                                else:
                                    logger.warning(f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {check_resp.status}: {image_url}")
                        except aiohttp.ClientError as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
                
                if sent_images_count == 0:
                     messages.append({"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è '{object_nom}'."})

    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ handle_get_picture: {e}")
        messages.append({"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."})
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_get_picture: {e}", exc_info=True)
        messages.append({"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."})

    return messages

async def handle_get_description(result: dict, user_id: str, original_query: str) -> list:
    object_nom = result.get("object")
    url = f"{API_URLS['get_description']}?species_name={object_nom}"

    try:
        async with aiohttp.ClientSession() as session:
            logger.debug(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API: {url}")
            async with session.get(url, timeout=DEFAULT_TIMEOUT) as resp:
                data = await resp.json() if resp.ok else {}
                descriptions = data.get("descriptions", [])
                
                text = ""
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–ï–†–ï–ú –¢–û–õ–¨–ö–û –ü–ï–†–í–û–ï –û–ü–ò–°–ê–ù–ò–ï ---
                if descriptions:
                    first_item = descriptions[0]
                    if isinstance(first_item, dict):
                        text = first_item.get("content", "")
                    elif isinstance(first_item, str):
                        text = first_item
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ—Ç,
                # –∏–ª–∏ –æ—Ç–≤–µ—Ç API –±—ã–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–º, –∑–∞–ø—É—Å–∫–∞–µ–º fallback.
                if not resp.ok or not text:
                    if get_user_fallback_setting(user_id):
                        fallback_answer = await call_gigachat_fallback_service(original_query)
                        if fallback_answer:
                            full_answer = f"**–û—Ç–≤–µ—Ç –æ—Ç GigaChat:**\n\n{fallback_answer}"
                            return [{"type": "text", "content": full_answer, "parse_mode": "Markdown"}]
                        else:
                            return [{"type": "text", "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."}]
                    else:
                        logger.warning(f"API {url} –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É {resp.status} –∏–ª–∏ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
                        return [{"type": "text", "content": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{object_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}]

                return [{"type": "text", "content": text}]
        
    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ handle_get_description: {e}")
        return [{"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_get_description: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."}]

async def _get_map_from_api(session: aiohttp.ClientSession, url: str, payload: dict, object_name: str, geo_name: str = None) -> list:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç."""
    messages = []
    logger.debug(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –∫–∞—Ä—Ç: {url} —Å —Ç–µ–ª–æ–º: {payload}")
    async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as map_resp:
        if not map_resp.ok:
            logger.error(f"API –∫–∞—Ä—Ç {url} –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É {map_resp.status}: {await map_resp.text()}")
            return [{"type": "text", "content": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É."}]

        map_data = await map_resp.json()
        names = map_data.get("names", [])
        unique_names = sorted(list(set(name.capitalize() for name in names)))
        
        if unique_names:
            text = (f"üìç –†—è–¥–æ–º —Å '{geo_name}' –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å '{object_name}' –≤ –º–µ—Å—Ç–∞—Ö:\n" if geo_name 
                    else f"üìç '{object_name.capitalize()}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–∞—Ö:\n")
            message_text = text + "‚Ä¢ " + "\n‚Ä¢ ".join(unique_names)
            messages.append({"type": "text", "content": message_text})
        
        if map_data.get("status") == "no_objects":
            text = (f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª '{object_name}' –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç '{geo_name}'." if geo_name
                    else f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∞—Ä–µ–∞–ª –æ–±–∏—Ç–∞–Ω–∏—è –¥–ª—è '{object_name}'.")
            messages.append({"type": "text", "content": text})
            
        if map_data.get("interactive_map") and map_data.get("static_map"):
            messages.append({"type": "map", "static": map_data["static_map"], "interactive": map_data["interactive_map"], "caption": f"–ú–µ—Å—Ç–∞ –æ–±–∏—Ç–∞–Ω–∏—è: {object_name}"})
        
        return messages

async def handle_nearest(result: dict) -> list:
    object_nom = result.get("object")
    geo_nom = result.get("geo_place")

    try:
        async with aiohttp.ClientSession() as session:
            coords_url = API_URLS["get_coords"]
            logger.debug(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coords_url} —Å —Ç–µ–ª–æ–º: {{'name': '{geo_nom}'}}")
            async with session.post(coords_url, json={"name": geo_nom}, timeout=DEFAULT_TIMEOUT) as resp:
                if not resp.ok or (await resp.json()).get("status") == "not_found":
                    return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{geo_nom}'."}]
                coords = await resp.json()

            payload = {
                "latitude": coords.get("latitude"), "longitude": coords.get("longitude"), "radius_km": 35, 
                "species_name": object_nom, "object_type": "geographical_entity"
            }
            return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom, geo_nom)
            
    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ handle_nearest: {e}")
        return [{"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_nearest: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."}]

async def handle_draw_locate_map(result: dict) -> list:
    object_nom = result.get("object")
    payload = {
        "latitude": 53.27612, "longitude": 107.3274, "radius_km": 500000, 
        "species_name": object_nom, "object_type": "geographical_entity"
    }
    try:
        async with aiohttp.ClientSession() as session:
            return await _get_map_from_api(session, API_URLS["coords_to_map"], payload, object_nom)
    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ handle_draw_locate_map: {e}")
        return [{"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_draw_locate_map: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."}]

async def handle_objects_in_polygon(result: dict) -> list:
    geo_nom = result.get("geo_place")
    url = API_URLS["objects_in_polygon"]
    payload = {"name": geo_nom, "buffer_radius_km": 5, "object_type": "biological_entity"}
    messages = []
    
    try:
        async with aiohttp.ClientSession() as session:
            logger.debug(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API: {url} —Å —Ç–µ–ª–æ–º: {payload}")
            async with session.post(url, json=payload, timeout=DEFAULT_TIMEOUT) as resp:
                if not resp.ok:
                    return [{"type": "text", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è '{geo_nom}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."}]

                data = await resp.json()
                names = data.get("all_biological_names", [])
                
                if names:
                    unique_names = sorted(list(set(name.capitalize() for name in names)))
                    flora_list = f"üåø –í —Ä–∞–π–æ–Ω–µ '{geo_nom}' –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã:\n" + "‚Ä¢ " + "\n‚Ä¢ ".join(unique_names)
                    messages.append({"type": "text", "content": flora_list})
                else:
                    messages.append({"type": "text", "content": f"–í —Ä–∞–π–æ–Ω–µ '{geo_nom}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–Ω–µ –æ–±—ä–µ–∫—Ç–æ–≤."})

                if data.get("interactive_map") and data.get("static_map"):
                    messages.append({"type": "map", "static": data["static_map"], "interactive": data["interactive_map"], "caption": f"–û–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–π–æ–Ω–µ: {geo_nom}"})
            
        return messages

    except aiohttp.ClientError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ handle_objects_in_polygon: {e}")
        return [{"type": "text", "content": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_objects_in_polygon: {e}", exc_info=True)
        return [{"type": "text", "content": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."}]

async def handle_intent(result: dict, user_id: str, original_query: str) -> list:
    intent = result.get("intent")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ
    handlers = {
        "get_picture": handle_get_picture,
        "get_text": lambda res: handle_get_description(res, user_id, original_query),
        "get_intersection_object_on_map": handle_nearest,
        "get_location": handle_draw_locate_map,
        "get_objects_in_polygon": handle_objects_in_polygon,
    }

    handler = handlers.get(intent)
    if handler:
        return await handler(result)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π intent: {intent}")
        return [{"type": "text", "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å."}]